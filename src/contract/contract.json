{
  "contractName": "NFTContract",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "inputString",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "inputAddress",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "inputUint256",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "inputBoolean",
          "type": "bool[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CreateAlphaOctopusNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "PresalePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "PresaleTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "SalePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SaleTimeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_BY_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BY_MINT_WHITELIST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ELEMENTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MINT_TX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_MINT_WHITELIST_TX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_MINT_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRESALE_START",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALE_START",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "addToWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addressInWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        }
      ],
      "name": "airdropNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPresaleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRevealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "presaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "presalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "removeFromWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "reserveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resumeMinting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setPresalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_presaleTime",
          "type": "uint256"
        }
      ],
      "name": "setPresaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyFeesInBips",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_saleTime",
          "type": "uint256"
        }
      ],
      "name": "setSaleTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103505760003560e01c80635dc0e835116101c6578063b187bd26116100f7578063d547cfb711610095578063eb4f847b1161006f578063eb4f847b14610ef5578063edf85f5114610f24578063f2fde38b14610f5e578063f5ebec8014610f9857600080fd5b8063d547cfb714610e34578063da8fbf2a14610e63578063e985e9c514610e9257600080fd5b8063c9b298f1116100d1578063c9b298f114610d69578063d031370b14610d7c578063d336468714610db6578063d441a97414610de657600080fd5b8063b187bd2614610cc1578063b88d4fde14610cf5578063c87b56dd14610d2f57600080fd5b80638ad5de281161016457806395d89b411161013e57806395d89b4114610c0b578063a0712d6814610c3a578063a22cb46514610c4d578063b11560c514610c8757600080fd5b80638ad5de2814610b555780638d859f3e14610ba35780638da5cb5b14610bd357600080fd5b806370a08231116101a057806370a0823114610a83578063715018a614610abd578063740d73f314610aec578063853828b614610b2657600080fd5b80635dc0e835146109cb57806362dc6e2114610a195780636352211e14610a4957600080fd5b80633502a716116102a057806348ce85841161023e57806355f804b31161021857806355f804b3146108f957806359a7715a1461093357806359ae340e146109625780635bc00f411461099157600080fd5b806348ce85841461084c5780634f6ccce71461088657806354214f69146108c057600080fd5b80633f5dc6e51161027a5780633f5dc6e51461076257806340d0b4a91461079c57806342842e0e146107cb578063438b63001461080557600080fd5b80633502a716146106a05780633549345e146106ee5780633bd2b67d1461072857600080fd5b80631875d21a1161030d57806322673030116102e757806322673030146105a357806323b872dd146105d35780632a55205a1461060d5780632f745c591461066657600080fd5b80631875d21a146104e15780631919fed71461051b5780631a09d9651461055557600080fd5b806301ffc9a71461035557806302fa7c47146103a457806306fdde03146103e0578063081812fc1461041c578063095ea7b31461046e57806318160ddd146104a8575b600080fd5b34801561036157600080fd5b50d3801561036e57600080fd5b50d2801561037b57600080fd5b5061038f61038a3660046139bc565b610fe6565b60405190151581526020015b60405180910390f35b3480156103b057600080fd5b50d380156103bd57600080fd5b50d280156103ca57600080fd5b506103de6103d936600461385b565b610ff7565b005b3480156103ec57600080fd5b50d380156103f957600080fd5b50d2801561040657600080fd5b5061040f611038565b60405161039b9190613c06565b34801561042857600080fd5b50d3801561043557600080fd5b50d2801561044257600080fd5b50610456610451366004613a3f565b6110ca565b6040516001600160a01b03909116815260200161039b565b34801561047a57600080fd5b50d3801561048757600080fd5b50d2801561049457600080fd5b506103de6104a3366004613831565b61115f565b3480156104b457600080fd5b50d380156104c157600080fd5b50d280156104ce57600080fd5b506008545b60405190815260200161039b565b3480156104ed57600080fd5b50d380156104fa57600080fd5b50d2801561050757600080fd5b506104d3610516366004613a3f565b611275565b34801561052757600080fd5b50d3801561053457600080fd5b50d2801561054157600080fd5b506103de610550366004613a3f565b611297565b34801561056157600080fd5b50d3801561056e57600080fd5b50d2801561057b57600080fd5b506104d37f000000000000000000000000000000000000000000000000000000000000000081565b3480156105af57600080fd5b50d380156105bc57600080fd5b50d280156105c957600080fd5b506104d360105481565b3480156105df57600080fd5b50d380156105ec57600080fd5b50d280156105f957600080fd5b506103de61060836600461373d565b611300565b34801561061957600080fd5b50d3801561062657600080fd5b50d2801561063357600080fd5b50610647610642366004613a58565b611331565b604080516001600160a01b03909316835260208301919091520161039b565b34801561067257600080fd5b50d3801561067f57600080fd5b50d2801561068c57600080fd5b506104d361069b366004613831565b6113dd565b3480156106ac57600080fd5b50d380156106b957600080fd5b50d280156106c657600080fd5b506104d37f000000000000000000000000000000000000000000000000000000000000000081565b3480156106fa57600080fd5b50d3801561070757600080fd5b50d2801561071457600080fd5b506103de610723366004613a3f565b611473565b34801561073457600080fd5b50d3801561074157600080fd5b50d2801561074e57600080fd5b506103de61075d366004613a3f565b6114e8565b34801561076e57600080fd5b50d3801561077b57600080fd5b50d2801561078857600080fd5b5061038f6107973660046136ef565b611551565b3480156107a857600080fd5b50d380156107b557600080fd5b50d280156107c257600080fd5b506103de61157d565b3480156107d757600080fd5b50d380156107e457600080fd5b50d280156107f157600080fd5b506103de61080036600461373d565b6115c4565b34801561081157600080fd5b50d3801561081e57600080fd5b50d2801561082b57600080fd5b5061083f61083a3660046136ef565b6115df565b60405161039b9190613bc2565b34801561085857600080fd5b50d3801561086557600080fd5b50d2801561087257600080fd5b506103de610881366004613a3f565b611681565b34801561089257600080fd5b50d3801561089f57600080fd5b50d280156108ac57600080fd5b506104d36108bb366004613a3f565b6116f6565b3480156108cc57600080fd5b50d380156108d957600080fd5b50d280156108e657600080fd5b5060125461038f90610100900460ff1681565b34801561090557600080fd5b50d3801561091257600080fd5b50d2801561091f57600080fd5b506103de61092e3660046139f6565b611789565b34801561093f57600080fd5b50d3801561094c57600080fd5b50d2801561095957600080fd5b506104d36117d1565b34801561096e57600080fd5b50d3801561097b57600080fd5b50d2801561098857600080fd5b506103de6117e0565b34801561099d57600080fd5b50d380156109aa57600080fd5b50d280156109b757600080fd5b506103de6109c6366004613908565b611816565b3480156109d757600080fd5b50d380156109e457600080fd5b50d280156109f157600080fd5b506104d37f000000000000000000000000000000000000000000000000000000000000000081565b348015610a2557600080fd5b50d38015610a3257600080fd5b50d28015610a3f57600080fd5b506104d3600f5481565b348015610a5557600080fd5b50d38015610a6257600080fd5b50d28015610a6f57600080fd5b50610456610a7e366004613a3f565b61197d565b348015610a8f57600080fd5b50d38015610a9c57600080fd5b50d28015610aa957600080fd5b506104d3610ab83660046136ef565b6119f4565b348015610ac957600080fd5b50d38015610ad657600080fd5b50d28015610ae357600080fd5b506103de611a7b565b348015610af857600080fd5b50d38015610b0557600080fd5b50d28015610b1257600080fd5b506103de610b21366004613893565b611ab1565b348015610b3257600080fd5b50d38015610b3f57600080fd5b50d28015610b4c57600080fd5b506103de611c75565b348015610b6157600080fd5b50d38015610b6e57600080fd5b50d28015610b7b57600080fd5b506104d37f000000000000000000000000000000000000000000000000000000000000000081565b348015610baf57600080fd5b50d38015610bbc57600080fd5b50d28015610bc957600080fd5b506104d3600e5481565b348015610bdf57600080fd5b50d38015610bec57600080fd5b50d28015610bf957600080fd5b50600c546001600160a01b0316610456565b348015610c1757600080fd5b50d38015610c2457600080fd5b50d28015610c3157600080fd5b5061040f611cc8565b6103de610c48366004613a3f565b611cd7565b348015610c5957600080fd5b50d38015610c6657600080fd5b50d28015610c7357600080fd5b506103de610c823660046137f5565b612021565b348015610c9357600080fd5b50d38015610ca057600080fd5b50d28015610cad57600080fd5b506103de610cbc366004613893565b6120e6565b348015610ccd57600080fd5b50d38015610cda57600080fd5b50d28015610ce757600080fd5b5060125461038f9060ff1681565b348015610d0157600080fd5b50d38015610d0e57600080fd5b50d28015610d1b57600080fd5b506103de610d2a366004613779565b612202565b348015610d3b57600080fd5b50d38015610d4857600080fd5b50d28015610d5557600080fd5b5061040f610d64366004613a3f565b612234565b6103de610d77366004613a3f565b612354565b348015610d8857600080fd5b50d38015610d9557600080fd5b50d28015610da257600080fd5b506103de610db1366004613a3f565b61276d565b348015610dc257600080fd5b50d38015610dcf57600080fd5b50d28015610ddc57600080fd5b506104d360115481565b348015610df257600080fd5b50d38015610dff57600080fd5b50d28015610e0c57600080fd5b506104d37f000000000000000000000000000000000000000000000000000000000000000081565b348015610e4057600080fd5b50d38015610e4d57600080fd5b50d28015610e5a57600080fd5b5061040f6127dd565b348015610e6f57600080fd5b50d38015610e7c57600080fd5b50d28015610e8957600080fd5b506103de61286b565b348015610e9e57600080fd5b50d38015610eab57600080fd5b50d28015610eb857600080fd5b5061038f610ec736600461370a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610f0157600080fd5b50d38015610f0e57600080fd5b50d28015610f1b57600080fd5b5061038f6128a4565b348015610f3057600080fd5b50d38015610f3d57600080fd5b50d28015610f4a57600080fd5b506104d3610f59366004613a3f565b6128c9565b348015610f6a57600080fd5b50d38015610f7757600080fd5b50d28015610f8457600080fd5b506103de610f933660046136ef565b6128d9565b348015610fa457600080fd5b50d38015610fb157600080fd5b50d28015610fbe57600080fd5b506104d37f000000000000000000000000000000000000000000000000000000000000000081565b6000610ff18261297a565b92915050565b600c546001600160a01b0316331461102a5760405162461bcd60e51b815260040161102190613c6b565b60405180910390fd5b611034828261299f565b5050565b60606000805461104790613db0565b80601f016020809104026020016040519081016040528092919081815260200182805461107390613db0565b80156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166111435760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401611021565b506000908152600460205260409020546001600160a01b031690565b600061116a8261197d565b9050806001600160a01b0316836001600160a01b031614156111d85760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401611021565b336001600160a01b03821614806111f457506111f48133610ec7565b6112665760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401611021565b6112708383612a9c565b505050565b60008061128181612b0a565b600f5461128e9084612b8a565b91505b50919050565b600c546001600160a01b031633146112c15760405162461bcd60e51b815260040161102190613c6b565b60026112cc81612b0a565b600e82905560405182907f421d50d68688bdeb8868bd642bc70a6ead1cfb014d1f6d1780538fd56420655c90600090a25050565b61130a3382612b9d565b6113265760405162461bcd60e51b815260040161102190613ca0565b611270838383612c94565b6000828152600b602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916113a6575060408051808201909152600a546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906113c5906001600160601b031687613d4e565b6113cf9190613d3a565b915196919550909350505050565b60006113e8836119f4565b821061144a5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401611021565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600c546001600160a01b0316331461149d5760405162461bcd60e51b815260040161102190613c6b565b60006114a881612b0a565b60026114b381612b0a565b600f83905560405183907f968f5f94b331765ebe8faa528344f798563c6fa571be7a076640ff4fa0a0341690600090a2505050565b600c546001600160a01b031633146115125760405162461bcd60e51b815260040161102190613c6b565b600361151d81612b0a565b601082905560405182907fb5d21b735d97350d5164fa17d5f1c9d68d877c1adc848ae345a3ea4d9c00ceb390600090a25050565b60008061155d81612b0a565b50506001600160a01b031660009081526013602052604090205460ff1690565b600c546001600160a01b031633146115a75760405162461bcd60e51b815260040161102190613c6b565b60046115b281612b0a565b506012805461ff001916610100179055565b61127083838360405180602001604052806000815250612202565b606060006115ec836119f4565b905060008167ffffffffffffffff81111561160957611609613e6c565b604051908082528060200260200182016040528015611632578160200160208202803683370190505b50905060005b828110156116795761164a85826113dd565b82828151811061165c5761165c613e56565b60209081029190910101528061167181613de5565b915050611638565b509392505050565b600c546001600160a01b031633146116ab5760405162461bcd60e51b815260040161102190613c6b565b60006116b681612b0a565b60036116c181612b0a565b601183905560405183907faa7d64f31a7825528c59603a3f3c0ec2fd4f5039c574e16f9cf5acc2885f247490600090a2505050565b600061170160085490565b82106117645760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401611021565b6008828154811061177757611777613e56565b90600052602060002001549050919050565b600c546001600160a01b031633146117b35760405162461bcd60e51b815260040161102190613c6b565b60066117be81612b0a565b815161127090601a9060208501906135d6565b60006117db612e3f565b905090565b600c546001600160a01b0316331461180a5760405162461bcd60e51b815260040161102190613c6b565b6012805460ff19169055565b600c546001600160a01b031633146118405760405162461bcd60e51b815260040161102190613c6b565b600161184b81612b0a565b6000611861600161185b600d5490565b90612e4a565b90507f00000000000000000000000000000000000000000000000000000000000000008351826118919190613d22565b11156118cb5760405162461bcd60e51b815260206004820152600960248201526813585e081b1a5b5a5d60ba1b6044820152606401611021565b60008351116119375760405162461bcd60e51b815260206004820152603260248201527f506c656173652070726f7669646520746865206c697374206f662077616c6c656044820152710747320666f72207468652061697264726f760741b6064820152608401611021565b60005b83518110156119775761196584828151811061195857611958613e56565b6020026020010151612e56565b8061196f81613de5565b91505061193a565b50505050565b6000818152600260205260408120546001600160a01b031680610ff15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401611021565b60006001600160a01b038216611a5f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401611021565b506001600160a01b031660009081526003602052604090205490565b600c546001600160a01b03163314611aa55760405162461bcd60e51b815260040161102190613c6b565b611aaf6000612ea9565b565b600c546001600160a01b03163314611adb5760405162461bcd60e51b815260040161102190613c6b565b6000611ae681612b0a565b60005b82811015611977576000848483818110611b0557611b05613e56565b9050602002016020810190611b1a91906136ef565b6001600160a01b03161415611b665760405162461bcd60e51b8152602060048201526012602482015271139d5b1b081859191c995cdcc8199bdd5b9960721b6044820152606401611021565b600160136000868685818110611b7e57611b7e613e56565b9050602002016020810190611b9391906136ef565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155601481868685818110611bd357611bd3613e56565b9050602002016020810190611be891906136ef565b6001600160a01b03166001600160a01b031681526020019081526020016000205411611c15576000611c62565b60146000858584818110611c2b57611c2b613e56565b9050602002016020810190611c4091906136ef565b6001600160a01b03166001600160a01b03168152602001908152602001600020545b5080611c6d81613de5565b915050611ae9565b600c546001600160a01b03163314611c9f5760405162461bcd60e51b815260040161102190613c6b565b4780611caa57600080fd5b611cc5611cbf600c546001600160a01b031690565b82612efb565b50565b60606001805461104790613db0565b600c546001600160a01b03163314611d2d574260105410611d2d5760405162461bcd60e51b815260206004820152601060248201526f29b0b6329034b9903737ba1037b832b760811b6044820152606401611021565b6000611d3d600161185b600d5490565b90507f0000000000000000000000000000000000000000000000000000000000000000611d6a8383613d22565b1115611da45760405162461bcd60e51b815260206004820152600960248201526813585e081b1a5b5a5d60ba1b6044820152606401611021565b7f0000000000000000000000000000000000000000000000000000000000000000811115611e205760405162461bcd60e51b8152602060048201526024808201527f416c6c20416c706861204f63746f707573204e465427732061726520736f6c64604482015263081bdd5d60e21b6064820152608401611021565b7f0000000000000000000000000000000000000000000000000000000000000000821115611e9e5760405162461bcd60e51b815260206004820152602560248201527f4578636565647320616c6c6f776564204e4654277320706572207472616e736160448201526431ba34b7b760d91b6064820152608401611021565b60125460ff1615611ee35760405162461bcd60e51b815260206004820152600f60248201526e29b0b6329034b9902830bab9b2b21760891b6044820152606401611021565b336000908152601560205260409020547f000000000000000000000000000000000000000000000000000000000000000090611f20908490613d22565b1115611f6e5760405162461bcd60e51b815260206004820152601b60248201527f4578636565647320796f7572206d696e74696e672071756f74612e00000000006044820152606401611021565b611f77826128c9565b341015611fba5760405162461bcd60e51b815260206004820152601160248201527056616c75652062656c6f7720707269636560781b6044820152606401611021565b3360009081526015602052604081208054849290611fd9908490613d22565b90915550600090505b8281101561200557611ff333612e56565b80611ffd81613de5565b915050611fe2565b5061103461201b600c546001600160a01b031690565b47612efb565b6001600160a01b03821633141561207a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401611021565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600c546001600160a01b031633146121105760405162461bcd60e51b815260040161102190613c6b565b600061211b81612b0a565b60005b8281101561197757600084848381811061213a5761213a613e56565b905060200201602081019061214f91906136ef565b6001600160a01b0316141561219b5760405162461bcd60e51b8152602060048201526012602482015271139d5b1b081859191c995cdcc8199bdd5b9960721b6044820152606401611021565b6000601360008686858181106121b3576121b3613e56565b90506020020160208101906121c891906136ef565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806121fa81613de5565b91505061211e565b61220c3383612b9d565b6122285760405162461bcd60e51b815260040161102190613ca0565b61197784848484612f31565b6000818152600260205260409020546060906001600160a01b03166122b35760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401611021565b604080518082019091526005815264173539b7b760d91b6020820152829060006122db612f64565b601254909150610100900460ff161561234257600081511161230c5760405180602001604052806000815250612339565b8061231684612f73565b8360405160200161232993929190613aa6565b6040516020818303038152906040525b95945050505050565b60196040516020016123299190613ae9565b600c546001600160a01b031633146123f55742601154106123ae5760405162461bcd60e51b81526020600482015260146024820152732839329029b0b6329034b9903737ba1037b832b760611b6044820152606401611021565b42601054116123f55760405162461bcd60e51b81526020600482015260136024820152722839329029b0b6329034b99031b637b9b2b21760691b6044820152606401611021565b600061240081612b0a565b3360009081526013602052604090205460ff1661245f5760405162461bcd60e51b815260206004820152601860248201527f596f7520617265206e6f7420696e2077686974656c69737400000000000000006044820152606401611021565b7f00000000000000000000000000000000000000000000000000000000000000008211156124da5760405162461bcd60e51b815260206004820152602260248201527f4d6f7265207468656e20616c6c6f77656420706572207472616e73616374696f604482015261371760f11b6064820152608401611021565b336000908152601460205260409020547f000000000000000000000000000000000000000000000000000000000000000090612517908490613d22565b11156125735760405162461bcd60e51b815260206004820152602560248201527f4578636565647320796f75722077686974656c697374206d696e74696e6720716044820152643ab7ba309760d91b6064820152608401611021565b6000612583600161185b600d5490565b90507f00000000000000000000000000000000000000000000000000000000000000006125b08483613d22565b11156125f25760405162461bcd60e51b815260206004820152601160248201527013585e081c1c995cd85b19481b1a5b5a5d607a1b6044820152606401611021565b7f00000000000000000000000000000000000000000000000000000000000000008111156126625760405162461bcd60e51b815260206004820152601e60248201527f416c6c2070726573616c65204e465427732061726520736f6c64206f757400006044820152606401611021565b61266b83611275565b3410156126ae5760405162461bcd60e51b815260206004820152601160248201527056616c75652062656c6f7720707269636560781b6044820152606401611021565b60125460ff16156126f35760405162461bcd60e51b815260206004820152600f60248201526e29b0b6329034b9902830bab9b2b21760891b6044820152606401611021565b3360009081526014602052604081208054859290612712908490613d22565b92505081905550826018600082825461272b9190613d22565b90915550600090505b838110156127575761274533612e56565b8061274f81613de5565b915050612734565b5061127061201b600c546001600160a01b031690565b600c546001600160a01b031633146127975760405162461bcd60e51b815260040161102190613c6b565b60056127a281612b0a565b60005b8281101561127057601780549060006127bd83613de5565b91905055506127cb33612e56565b806127d581613de5565b9150506127a5565b601a80546127ea90613db0565b80601f016020809104026020016040519081016040528092919081815260200182805461281690613db0565b80156128635780601f1061283857610100808354040283529160200191612863565b820191906000526020600020905b81548152906001019060200180831161284657829003601f168201915b505050505081565b600c546001600160a01b031633146128955760405162461bcd60e51b815260040161102190613c6b565b6012805460ff19166001179055565b6000426011541080156128b8575042601054115b156128c35750600190565b50600090565b600e54600090610ff19083612b8a565b600c546001600160a01b031633146129035760405162461bcd60e51b815260040161102190613c6b565b6001600160a01b0381166129685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611021565b611cc581612ea9565b80546001019055565b60006001600160e01b0319821663152a902d60e11b1480610ff15750610ff182613071565b6127106001600160601b0382161115612a0d5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401611021565b6001600160a01b038216612a635760405162461bcd60e51b815260206004820152601960248201527f455243323938313a20696e76616c6964207265636569766572000000000000006044820152606401611021565b604080518082019091526001600160a01b039092168083526001600160601b039091166020909201829052600160a01b90910217600a55565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612ad18261197d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60168181548110612b1d57612b1d613e56565b90600052602060002090602091828204019190069054906101000a900460ff16611cc557604051732332b0ba3ab932902737ba1022b730b13632b21760611b602082015260340160408051601f198184030181529082905262461bcd60e51b825261102191600401613c06565b6000612b968284613d4e565b9392505050565b6000818152600260205260408120546001600160a01b0316612c165760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401611021565b6000612c218361197d565b9050806001600160a01b0316846001600160a01b03161480612c5c5750836001600160a01b0316612c51846110ca565b6001600160a01b0316145b80612c8c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612ca78261197d565b6001600160a01b031614612d0f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401611021565b6001600160a01b038216612d715760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401611021565b612d7c838383613096565b612d87600082612a9c565b6001600160a01b0383166000908152600360205260408120805460019290612db0908490613d6d565b90915550506001600160a01b0382166000908152600360205260408120805460019290612dde908490613d22565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006117db600d5490565b6000612b968284613d6d565b6000612e60612e3f565b9050612e70600d80546001019055565b612e7a828261314e565b60405181907f928c1f062bafbf3ad16c2891248d751ea6a7aea539f67650139b8f8860ad86b390600090a25050565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015611270573d6000803e3d6000fd5b612f3c848484612c94565b612f4884848484613168565b6119775760405162461bcd60e51b815260040161102190613c19565b6060601a805461104790613db0565b606081612f975750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612fc15780612fab81613de5565b9150612fba9050600a83613d3a565b9150612f9b565b60008167ffffffffffffffff811115612fdc57612fdc613e6c565b6040519080825280601f01601f191660200182016040528015613006576020820181803683370190505b5090505b8415612c8c5761301b600183613d6d565b9150613028600a86613e00565b613033906030613d22565b60f81b81838151811061304857613048613e56565b60200101906001600160f81b031916908160001a90535061306a600a86613d3a565b945061300a565b60006001600160e01b0319821663780e9d6360e01b1480610ff15750610ff182613275565b6001600160a01b0383166130f1576130ec81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613114565b816001600160a01b0316836001600160a01b0316146131145761311483826132c5565b6001600160a01b03821661312b5761127081613362565b826001600160a01b0316826001600160a01b031614611270576112708282613411565b611034828260405180602001604052806000815250613455565b60006001600160a01b0384163b1561326a57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906131ac903390899088908890600401613b85565b602060405180830381600087803b1580156131c657600080fd5b505af19250505080156131f6575060408051601f3d908101601f191682019092526131f3918101906139d9565b60015b613250573d808015613224576040519150601f19603f3d011682016040523d82523d6000602084013e613229565b606091505b5080516132485760405162461bcd60e51b815260040161102190613c19565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c8c565b506001949350505050565b60006001600160e01b031982166380ac58cd60e01b14806132a657506001600160e01b03198216635b5e139f60e01b145b80610ff157506301ffc9a760e01b6001600160e01b0319831614610ff1565b600060016132d2846119f4565b6132dc9190613d6d565b60008381526007602052604090205490915080821461332f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061337490600190613d6d565b6000838152600960205260408120546008805493945090928490811061339c5761339c613e56565b9060005260206000200154905080600883815481106133bd576133bd613e56565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806133f5576133f5613e40565b6001900381819060005260206000200160009055905550505050565b600061341c836119f4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b61345f8383613488565b61346c6000848484613168565b6112705760405162461bcd60e51b815260040161102190613c19565b6001600160a01b0382166134de5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401611021565b6000818152600260205260409020546001600160a01b0316156135435760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401611021565b61354f60008383613096565b6001600160a01b0382166000908152600360205260408120805460019290613578908490613d22565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546135e290613db0565b90600052602060002090601f016020900481019282613604576000855561364a565b82601f1061361d57805160ff191683800117855561364a565b8280016001018555821561364a579182015b8281111561364a57825182559160200191906001019061362f565b5061365692915061365a565b5090565b5b80821115613656576000815560010161365b565b600067ffffffffffffffff83111561368957613689613e6c565b61369c601f8401601f1916602001613cf1565b90508281528383830111156136b057600080fd5b828260208301376000602084830101529392505050565b600081356001600160a81b03811681146136e057600080fd5b6001600160a01b031692915050565b60006020828403121561370157600080fd5b612b96826136c7565b6000806040838503121561371d57600080fd5b613726836136c7565b9150613734602084016136c7565b90509250929050565b60008060006060848603121561375257600080fd5b61375b846136c7565b9250613769602085016136c7565b9150604084013590509250925092565b6000806000806080858703121561378f57600080fd5b613798856136c7565b93506137a6602086016136c7565b925060408501359150606085013567ffffffffffffffff8111156137c957600080fd5b8501601f810187136137da57600080fd5b6137e98782356020840161366f565b91505092959194509250565b6000806040838503121561380857600080fd5b613811836136c7565b91506020830135801515811461382657600080fd5b809150509250929050565b6000806040838503121561384457600080fd5b61384d836136c7565b946020939093013593505050565b6000806040838503121561386e57600080fd5b613877836136c7565b915060208301356001600160601b038116811461382657600080fd5b600080602083850312156138a657600080fd5b823567ffffffffffffffff808211156138be57600080fd5b818501915085601f8301126138d257600080fd5b8135818111156138e157600080fd5b8660208260051b85010111156138f657600080fd5b60209290920196919550909350505050565b6000602080838503121561391b57600080fd5b823567ffffffffffffffff8082111561393357600080fd5b818501915085601f83011261394757600080fd5b81358181111561395957613959613e6c565b8060051b915061396a848301613cf1565b8181528481019084860184860187018a101561398557600080fd5b600095505b838610156139af5761399b816136c7565b83526001959095019491860191860161398a565b5098975050505050505050565b6000602082840312156139ce57600080fd5b8135612b9681613e82565b6000602082840312156139eb57600080fd5b8151612b9681613e82565b600060208284031215613a0857600080fd5b813567ffffffffffffffff811115613a1f57600080fd5b8201601f81018413613a3057600080fd5b612c8c8482356020840161366f565b600060208284031215613a5157600080fd5b5035919050565b60008060408385031215613a6b57600080fd5b50508035926020909101359150565b60008151808452613a92816020860160208601613d84565b601f01601f19169290920160200192915050565b60008451613ab8818460208901613d84565b845190830190613acc818360208901613d84565b8451910190613adf818360208801613d84565b0195945050505050565b600080835481600182811c915080831680613b0557607f831692505b6020808410821415613b2557634e487b7160e01b86526022600452602486fd5b818015613b395760018114613b4a57613b77565b60ff19861689528489019650613b77565b60008a81526020902060005b86811015613b6f5781548b820152908501908301613b56565b505084890196505b509498975050505050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613bb890830184613a7a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613bfa57835183529284019291840191600101613bde565b50909695505050505050565b602081526000612b966020830184613a7a565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d1a57613d1a613e6c565b604052919050565b60008219821115613d3557613d35613e14565b500190565b600082613d4957613d49613e2a565b500490565b6000816000190483118215151615613d6857613d68613e14565b500290565b600082821015613d7f57613d7f613e14565b500390565b60005b83811015613d9f578181015183820152602001613d87565b838111156119775750506000910152565b600181811c90821680613dc457607f821691505b6020821081141561129157634e487b7160e01b600052602260045260246000fd5b6000600019821415613df957613df9613e14565b5060010190565b600082613e0f57613e0f613e2a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611cc557600080fdfea26474726f6e58221220ffb576fa7f151f5631612442e2db4a808fed2d24dbdc91a5682030d86de5eef364736f6c63430008060033",
  "sourceMap": "19622:12106:0:-:0;;;20321:28;;;-1:-1:-1;;20355:30:0;;;20344:5;20595:34;;;;20635:37;;22091:1281;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4338:13;;22327:5;;22334:7;;4338:13;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;4361:17:0;;;;:7;;:17;;;;;:::i;:::-;;4272:113;;16344:23;16354:12;:10;;;:12;;:::i;:::-;16344:9;:23::i;:::-;22368:12:::1;21356:1;22368:29;;;;;;;;:::i;:::-;;;;;;;22353:44;;;;::::0;::::1;22421:12;21395:1;22421:26;;;;;;;;:::i;:::-;;;;;;;22407:40;;;;::::0;::::1;22465:12;21432:1;22465:24;;;;;;;;:::i;:::-;;;;;;;22457:5;:32;;;;22513:12;21475:1;22513:30;;;;;;;;:::i;:::-;;;;;;;22499:44;;;;::::0;::::1;22566:12;21517:1;22566:29;;;;;;;;:::i;:::-;;;;;;;22553:10;:42;;;;22626:12;21596:1;22626:27;;;;;;;;:::i;:::-;;;;;;;22605:48;;;;::::0;::::1;22679:12;21641:1;22679:32;;;;;;;;:::i;:::-;;;;;;;22663:13;:48;;;;22745:12;21687:1;22745:33;;;;;;;;:::i;:::-;;;;;;;22721:57;;;;::::0;::::1;22812:12;21737:1;22812:37;;;;;;;;:::i;:::-;;::::0;;::::1;::::0;;;;;;;22788:61:::1;::::0;22859:31;;::::1;::::0;:16:::1;::::0;:31;;::::1;::::0;::::1;:::i;:::-;;22905:16;21989:1;22905:35;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;22900:84;;22956:10;:17:::0;;-1:-1:-1;;22956:17:0::1;;;::::0;;22900:84:::1;22993:119;23025:12;21298:1;23025:29;;;;;;;;:::i;:::-;;;;;;;23075:12;21556:1;23075:26;;;;;;;;:::i;:::-;;;;;;;22993:18;;;:119;;:::i;:::-;23142:12;21256:1;23142:30;;;;;;;;:::i;:::-;;;;;;;23122:17;;:50;;;;;-1:-1:-1::0;;;;;23122:50:0::1;;;;;-1:-1:-1::0;;;;;23122:50:0::1;;;;;;23182:30;23192:12;21213:1;23192:19;;;;;;;;:::i;:::-;;;;;;;23182:9;;;:30;;:::i;:::-;23244:11;21127:1;23244:34;;;;;;;;:::i;:::-;;;;;;;23222:19;:56;;;;;;;;;;;;:::i;:::-;;23303:11;21166:1;23303:25;;;;;;;;:::i;:::-;;;;;;;23288:12;:40;;;;;;;;;;;;:::i;:::-;;23338:27;:15;:25;;;;;:27;;:::i;:::-;22091:1281:::0;;;;;;19622:12106;;3472:96;3551:10;;3472:96::o;16923:170::-;16998:6;;;-1:-1:-1;;;;;17014:17:0;;;-1:-1:-1;;;;;;17014:17:0;;;;;;;17046:40;;16998:6;;;17014:17;16998:6;;17046:40;;16979:16;;17046:40;16969:124;16923:170;:::o;18597:383::-;18579:5;-1:-1:-1;;;;;18734:33:0;;;;18713:122;;;;-1:-1:-1;;;18713:122:0;;5598:2:1;18713:122:0;;;5580:21:1;5637:2;5617:18;;;5610:30;5676:34;5656:18;;;5649:62;-1:-1:-1;;;5727:18:1;;;5720:40;5777:19;;18713:122:0;;;;;;;;;-1:-1:-1;;;;;18853:22:0;;18845:60;;;;-1:-1:-1;;;18845:60:0;;6009:2:1;18845:60:0;;;5991:21:1;6048:2;6028:18;;;6021:30;6087:27;6067:18;;;6060:55;6132:18;;18845:60:0;5981:175:1;18845:60:0;18938:35;;;;;;;;;-1:-1:-1;;;;;18938:35:0;;;;;;-1:-1:-1;;;;;18938:35:0;;;;;;;;;;-1:-1:-1;;;18916:57:0;;;;:19;:57;18597:383::o;1527:123::-;1614:19;;1632:1;1614:19;;;1527:123::o;19622:12106::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19622:12106:0;;;-1:-1:-1;19622:12106:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19622:12106:0;;;-1:-1:-1;19622:12106:0;;;;;;;;;;;;;;;14:837:1;79:5;132:3;125:4;117:6;113:17;109:27;99:2;;150:1;147;140:12;99:2;179:6;173:13;205:4;229:60;245:43;285:2;245:43;:::i;:::-;229:60;:::i;:::-;311:3;335:2;330:3;323:15;363:2;358:3;354:12;347:19;;398:2;390:6;386:15;450:3;445:2;439;436:1;432:10;424:6;420:23;416:32;413:41;410:2;;;467:1;464;457:12;410:2;489:1;510;520:302;536:2;531:3;528:11;520:302;;;598:10;;-1:-1:-1;;;;;641:31:1;;631:42;;621:2;;687:1;684;677:12;621:2;-1:-1:-1;;;;;716:31:1;704:44;;768:12;;;;800;;;;744:1;549:11;520:302;;;-1:-1:-1;840:5:1;;89:762;-1:-1:-1;;;;;;;;89:762:1:o;856:798::-;918:5;971:3;964:4;956:6;952:17;948:27;938:2;;989:1;986;979:12;938:2;1018:6;1012:13;1044:4;1068:60;1084:43;1124:2;1084:43;:::i;1068:60::-;1150:3;1174:2;1169:3;1162:15;1202:2;1197:3;1193:12;1186:19;;1237:2;1229:6;1225:15;1289:3;1284:2;1278;1275:1;1271:10;1263:6;1259:23;1255:32;1252:41;1249:2;;;1306:1;1303;1296:12;1249:2;1328:1;1349;1359:266;1375:2;1370:3;1367:11;1359:266;;;1443:3;1437:10;1494:5;1487:13;1480:21;1473:5;1470:32;1460:2;;1516:1;1513;1506:12;1460:2;1533:18;;1571:12;;;;1603;;;;1397:1;1388:11;1359:266;;1659:864;1723:5;1776:3;1769:4;1761:6;1757:17;1753:27;1743:2;;1794:1;1791;1784:12;1743:2;1823:6;1817:13;1849:4;1873:60;1889:43;1929:2;1889:43;:::i;1873:60::-;1955:3;1979:2;1974:3;1967:15;2007:2;2002:3;1998:12;1991:19;;2042:2;2034:6;2030:15;2094:3;2089:2;2083;2080:1;2076:10;2068:6;2064:23;2060:32;2057:41;2054:2;;;2111:1;2108;2101:12;2054:2;2133:1;2154;2164:330;2180:2;2175:3;2172:11;2164:330;;;2248:10;;-1:-1:-1;;;;;2274:35:1;;2271:2;;;2322:1;2319;2312:12;2271:2;2351:68;2415:3;2410:2;2396:11;2388:6;2384:24;2380:33;2351:68;:::i;:::-;2339:81;;-1:-1:-1;2440:12:1;;;;2472;;;;2202:1;2193:11;2164:330;;2528:670;2593:5;2646:3;2639:4;2631:6;2627:17;2623:27;2613:2;;2664:1;2661;2654:12;2613:2;2693:6;2687:13;2719:4;2743:60;2759:43;2799:2;2759:43;:::i;2743:60::-;2825:3;2849:2;2844:3;2837:15;2877:2;2872:3;2868:12;2861:19;;2912:2;2904:6;2900:15;2964:3;2959:2;2953;2950:1;2946:10;2938:6;2934:23;2930:32;2927:41;2924:2;;;2981:1;2978;2971:12;2924:2;3003:1;3013:156;3027:2;3024:1;3021:9;3013:156;;;3084:10;;3072:23;;3115:12;;;;3147;;;;3045:1;3038:9;3013:156;;;-1:-1:-1;3187:5:1;;2603:595;-1:-1:-1;;;;;;;2603:595:1:o;3203:695::-;3257:5;3310:3;3303:4;3295:6;3291:17;3287:27;3277:2;;3328:1;3325;3318:12;3277:2;3351:13;;-1:-1:-1;;;;;3376:26:1;;3373:2;;;3405:18;;:::i;:::-;3444:4;3472:53;3515:2;3496:13;;-1:-1:-1;;3492:27:1;3488:36;;3472:53;:::i;:::-;3550:2;3541:7;3534:19;3594:3;3589:2;3584;3576:6;3572:15;3568:24;3565:33;3562:2;;;3611:1;3608;3601:12;3562:2;3633:1;3643:134;3657:2;3654:1;3651:9;3643:134;;;3746:14;;;3742:23;;3736:30;3714:15;;;3710:24;;3703:64;3668:10;;3643:134;;;3795:2;3792:1;3789:9;3786:2;;;3855:1;3850:2;3845;3836:7;3832:16;3828:25;3821:36;3786:2;-1:-1:-1;3885:7:1;3267:631;-1:-1:-1;;;;;3267:631:1:o;3903:1488::-;4145:6;4153;4161;4169;4177;4185;4238:3;4226:9;4217:7;4213:23;4209:33;4206:2;;;4255:1;4252;4245:12;4206:2;4282:16;;-1:-1:-1;;;;;4347:14:1;;;4344:2;;;4374:1;4371;4364:12;4344:2;4397:61;4450:7;4441:6;4430:9;4426:22;4397:61;:::i;:::-;4387:71;;4504:2;4493:9;4489:18;4483:25;4467:41;;4533:2;4523:8;4520:16;4517:2;;;4549:1;4546;4539:12;4517:2;4572:63;4627:7;4616:8;4605:9;4601:24;4572:63;:::i;:::-;4562:73;;4681:2;4670:9;4666:18;4660:25;4644:41;;4710:2;4700:8;4697:16;4694:2;;;4726:1;4723;4716:12;4694:2;4749:73;4814:7;4803:8;4792:9;4788:24;4749:73;:::i;:::-;4739:83;;4868:2;4857:9;4853:18;4847:25;4831:41;;4897:2;4887:8;4884:16;4881:2;;;4913:1;4910;4903:12;4881:2;4936:74;5002:7;4991:8;4980:9;4976:24;4936:74;:::i;:::-;4926:84;;5056:3;5045:9;5041:19;5035:26;5019:42;;5086:2;5076:8;5073:16;5070:2;;;5102:1;5099;5092:12;5070:2;5125:74;5191:7;5180:8;5169:9;5165:24;5125:74;:::i;:::-;5115:84;;5245:3;5234:9;5230:19;5224:26;5208:42;;5275:2;5265:8;5262:16;5259:2;;;5291:1;5288;5281:12;5259:2;;5314:71;5377:7;5366:8;5355:9;5351:24;5314:71;:::i;:::-;5304:81;;;4196:1195;;;;;;;;:::o;6161:275::-;6232:2;6226:9;6297:2;6278:13;;-1:-1:-1;;6274:27:1;6262:40;;-1:-1:-1;;;;;6317:34:1;;6353:22;;;6314:62;6311:2;;;6379:18;;:::i;:::-;6415:2;6408:22;6206:230;;-1:-1:-1;6206:230:1:o;6441:183::-;6501:4;-1:-1:-1;;;;;6523:30:1;;6520:2;;;6556:18;;:::i;:::-;-1:-1:-1;6601:1:1;6597:14;6613:4;6593:25;;6510:114::o;6629:380::-;6708:1;6704:12;;;;6751;;;6772:2;;6826:4;6818:6;6814:17;6804:27;;6772:2;6879;6871:6;6868:14;6848:18;6845:38;6842:2;;;6925:10;6920:3;6916:20;6913:1;6906:31;6960:4;6957:1;6950:15;6988:4;6985:1;6978:15;6842:2;;6684:325;;;:::o;7014:127::-;7075:10;7070:3;7066:20;7063:1;7056:31;7106:4;7103:1;7096:15;7130:4;7127:1;7120:15;7146:127;7207:10;7202:3;7198:20;7195:1;7188:31;7238:4;7235:1;7228:15;7262:4;7259:1;7252:15;7178:95;19622:12106:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMapi;:::-;;:::i;:::-;;;10184:14:1;;10177:22;10159:41;;10147:2;10132:18;31542:184:0;;;;;;;;31361:175;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;31361:175:0;;;;;:::i;:::-;;:::i;:::-;;5259:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;6411:265::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6411:265:0;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;8566:32:1;;;8548:51;;8536:2;8521:18;6411:265:0;8503:102:1;6002:403:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6002:403:0;;;;;:::i;:::-;;:::i;12873:111::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12960:10:0;:17;12873:111;;;24422:25:1;;;24410:2;24395:18;12873:111:0;24377:76:1;27483:155:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;27483:155:0;;;;;:::i;:::-;;:::i;29989:179::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;29989:179:0;;;;;:::i;:::-;;:::i;20075:46::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20179:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7192:366;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7192:366:0;;;;;:::i;:::-;;:::i;18024:466::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;18024:466:0;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;9295:32:1;;;9277:51;;9359:2;9344:18;;9337:34;;;;9250:18;18024:466:0;9232:145:1;12558:309:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12558:309:0;;;;;:::i;:::-;;:::i;19839:37::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;29730:253;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;29730:253:0;;;;;:::i;:::-;;:::i;29369:191::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;29369:191:0;;;;;:::i;:::-;;:::i;30601:149::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;30601:149:0;;;;;:::i;:::-;;:::i;27257:108::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7564:181::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7564:181:0;;;;;:::i;:::-;;:::i;28730:358::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;28730:358:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;29094:269::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;29094:269:0;;;;;:::i;:::-;;:::i;12990:280::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12990:280:0;;;;;:::i;:::-;;:::i;20355:30::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20355:30:0;;;;;;;;;;;27761:135;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;27761:135:0;;;;;:::i;:::-;;:::i;24399:91::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;29647:77::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;26582:469::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;26582:469:0;;;;;:::i;:::-;;:::i;20127:46::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19908:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4970:283;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4970:283:0;;;;;:::i;:::-;;:::i;4711:253::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4711:253:0;;;;;:::i;:::-;;:::i;16594:94::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;30174:421::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;30174:421:0;;;;;:::i;:::-;;:::i;31070:165::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;19984:36::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19882:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16380:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16452:6:0;;-1:-1:-1;;;;;16452:6:0;16380:85;;5365:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;24727:801::-;;;;;;:::i;:::-;;:::i;6682:314::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6682:314:0;;;;;:::i;:::-;;:::i;30756:308::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;30756:308:0;;;;;:::i;:::-;;:::i;20321:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;20321:28:0;;;;;;;;7751:354;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7751:354:0;;;;;:::i;:::-;;:::i;27902:822::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;27902:822:0;;;;;:::i;:::-;;:::i;25534:1042::-;;;;;;:::i;:::-;;:::i;24496:225::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;24496:225:0;;;;;:::i;:::-;;:::i;20248:28::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19942:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;20719:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;29566:75::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7002:184::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7002:184:0;;;;;:::i;:::-;-1:-1:-1;;;;;7144:25:0;;;7121:4;7144:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;7002:184;24092:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;27371:106::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;27371:106:0;;;;;:::i;:::-;;:::i;16694:223::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16694:223:0;;;;;:::i;:::-;;:::i;20026:43::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31542:184;31660:4;31683:36;31707:11;31683:23;:36::i;:::-;31676:43;31542:184;-1:-1:-1;;31542:184:0:o;31361:175::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;;;;;;;;;31480:49:::1;31499:9;31510:18;31480;:49::i;:::-;31361:175:::0;;:::o;5259:100::-;5315:13;5347:5;5340:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5259:100;:::o;6411:265::-;6501:7;8546:16;;;:7;:16;;;;;;-1:-1:-1;;;;;8546:16:0;6520:107;;;;-1:-1:-1;;;6520:107:0;;19086:2:1;6520:107:0;;;19068:21:1;19125:2;19105:18;;;19098:30;19164:34;19144:18;;;19137:62;-1:-1:-1;;;19215:18:1;;;19208:42;19267:19;;6520:107:0;19058:234:1;6520:107:0;-1:-1:-1;6645:24:0;;;;:15;:24;;;;;;-1:-1:-1;;;;;6645:24:0;;6411:265::o;6002:403::-;6084:13;6100:23;6115:7;6100:14;:23::i;:::-;6084:39;;6147:5;-1:-1:-1;;;;;6141:11:0;:2;-1:-1:-1;;;;;6141:11:0;;;6133:57;;;;-1:-1:-1;;;6133:57:0;;21435:2:1;6133:57:0;;;21417:21:1;21474:2;21454:18;;;21447:30;21513:34;21493:18;;;21486:62;-1:-1:-1;;;21564:18:1;;;21557:31;21605:19;;6133:57:0;21407:223:1;6133:57:0;3551:10;-1:-1:-1;;;;;6222:21:0;;;;:62;;-1:-1:-1;6247:37:0;6264:5;3551:10;7002:184;:::i;6247:37::-;6201:165;;;;-1:-1:-1;;;6201:165:0;;17073:2:1;6201:165:0;;;17055:21:1;17112:2;17092:18;;;17085:30;17151:34;17131:18;;;17124:62;17222:26;17202:18;;;17195:54;17266:19;;6201:165:0;17045:246:1;6201:165:0;6377:21;6386:2;6390:7;6377:8;:21::i;:::-;6074:331;6002:403;;:::o;27483:155::-;27580:7;21793:1;23593:27;23607:12;23593:13;:27::i;:::-;27606:13:::1;::::0;:25:::1;::::0;27624:6;27606:17:::1;:25::i;:::-;27599:32;;23630:1;27483:155:::0;;;;:::o;29989:179::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21890:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;30108:5:::2;:14:::0;;;30137:24:::2;::::0;30116:6;;30137:24:::2;::::0;;;::::2;16580:1:::1;29989:179:::0;:::o;7192:366::-;7396:41;3551:10;7429:7;7396:18;:41::i;:::-;7375:137;;;;-1:-1:-1;;;7375:137:0;;;;;;;:::i;:::-;7523:28;7533:4;7539:2;7543:7;7523:9;:28::i;18024:466::-;18143:7;18200:27;;;:17;:27;;;;;;;;18171:56;;;;;;;;;-1:-1:-1;;;;;18171:56:0;;;;;-1:-1:-1;;;18171:56:0;;;-1:-1:-1;;;;;18171:56:0;;;;;;;;18143:7;;18238:90;;-1:-1:-1;18288:29:0;;;;;;;;;18298:19;18288:29;-1:-1:-1;;;;;18288:29:0;;;;-1:-1:-1;;;18288:29:0;;-1:-1:-1;;;;;18288:29:0;;;;;18238:90;18376:23;;;;18338:21;;18579:5;;18363:36;;-1:-1:-1;;;;;18363:36:0;:10;:36;:::i;:::-;18362:70;;;;:::i;:::-;18451:16;;;;;-1:-1:-1;18024:466:0;;-1:-1:-1;;;;18024:466:0:o;12558:309::-;12677:7;12725:23;12742:5;12725:16;:23::i;:::-;12717:5;:31;12696:121;;;;-1:-1:-1;;;12696:121:0;;11461:2:1;12696:121:0;;;11443:21:1;11500:2;11480:18;;;11473:30;11539:34;11519:18;;;11512:62;-1:-1:-1;;;11590:18:1;;;11583:41;11641:19;;12696:121:0;11433:233:1;12696:121:0;-1:-1:-1;;;;;;12834:19:0;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;12558:309::o;29730:253::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21793:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;21890:1:::2;23593:27;23607:12;23593:13;:27::i;:::-;29912:13:::3;:22:::0;;;29949:27:::3;::::0;29928:6;;29949:27:::3;::::0;;;::::3;23630:1:::2;16580::::1;29730:253:::0;:::o;29369:191::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21945:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;29490:10:::2;:22:::0;;;29527:26:::2;::::0;29503:9;;29527:26:::2;::::0;;;::::2;16580:1:::1;29369:191:::0;:::o;30601:149::-;30704:4;21793:1;23593:27;23607:12;23593:13;:27::i;:::-;-1:-1:-1;;;;;;;30727:16:0::1;;::::0;;;:10:::1;:16;::::0;;;;;::::1;;::::0;30601:149::o;27257:108::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21989:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;-1:-1:-1::0;27341:10:0::2;:17:::0;;-1:-1:-1;;27341:17:0::2;;;::::0;;27257:108::o;7564:181::-;7699:39;7716:4;7722:2;7726:7;7699:39;;;;;;;;;;;;:16;:39::i;28730:358::-;28806:16;28834:18;28855:17;28865:6;28855:9;:17::i;:::-;28834:38;;28883:25;28925:10;28911:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;28911:25:0;;28883:53;;28951:9;28946:110;28970:10;28966:1;:14;28946:110;;;29015:30;29035:6;29043:1;29015:19;:30::i;:::-;29001:8;29010:1;29001:11;;;;;;;;:::i;:::-;;;;;;;;;;:44;28982:3;;;;:::i;:::-;;;;28946:110;;;-1:-1:-1;29073:8:0;28730:358;-1:-1:-1;;;28730:358:0:o;29094:269::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21793:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;21945:1:::2;23593:27;23607:12;23593:13;:27::i;:::-;29281:13:::3;:28:::0;;;29324:32:::3;::::0;29297:12;;29324:32:::3;::::0;;;::::3;23630:1:::2;16580::::1;29094:269:::0;:::o;12990:280::-;13081:7;13129:30;12960:10;:17;;12873:111;13129:30;13121:5;:38;13100:129;;;;-1:-1:-1;;;13100:129:0;;22956:2:1;13100:129:0;;;22938:21:1;22995:2;22975:18;;;22968:30;23034:34;23014:18;;;23007:62;-1:-1:-1;;;23085:18:1;;;23078:42;23137:19;;13100:129:0;22928:234:1;13100:129:0;13246:10;13257:5;13246:17;;;;;;;;:::i;:::-;;;;;;;;;13239:24;;12990:280;;;:::o;27761:135::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;22083:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;27867:22:::0;;::::2;::::0;:12:::2;::::0;:22:::2;::::0;::::2;::::0;::::2;:::i;24399:91::-:0;24443:7;24469:14;:12;:14::i;:::-;24462:21;;24399:91;:::o;29647:77::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;29701:8:::1;:16:::0;;-1:-1:-1;;29701:16:0::1;::::0;;29647:77::o;26582:469::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21835:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;26696:13:::2;26712:32;26742:1;26712:25;:15;1500:14:::0;;1409:112;26712:25:::2;:29:::0;::::2;:32::i;:::-;26696:48;;26788:12;26770:7;:14;26762:5;:22;;;;:::i;:::-;:38;;26754:60;;;::::0;-1:-1:-1;;;26754:60:0;;15611:2:1;26754:60:0::2;::::0;::::2;15593:21:1::0;15650:1;15630:18;;;15623:29;-1:-1:-1;;;15668:18:1;;;15661:39;15717:18;;26754:60:0::2;15583:158:1::0;26754:60:0::2;26862:1;26845:7;:14;:18;26824:115;;;::::0;-1:-1:-1;;;26824:115:0;;10637:2:1;26824:115:0::2;::::0;::::2;10619:21:1::0;10676:2;10656:18;;;10649:30;10715:34;10695:18;;;10688:62;-1:-1:-1;;;10766:18:1;;;10759:48;10824:19;;26824:115:0::2;10609:240:1::0;26824:115:0::2;26954:9;26949:96;26973:7;:14;26969:1;:18;26949:96;;;27008:26;27023:7;27031:1;27023:10;;;;;;;;:::i;:::-;;;;;;;27008:14;:26::i;:::-;26989:3:::0;::::2;::::0;::::2;:::i;:::-;;;;26949:96;;;;26686:365;16580:1:::1;26582:469:::0;:::o;4970:283::-;5056:7;5091:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5091:16:0;5138:19;5117:107;;;;-1:-1:-1;;;5117:107:0;;17909:2:1;5117:107:0;;;17891:21:1;17948:2;17928:18;;;17921:30;17987:34;17967:18;;;17960:62;-1:-1:-1;;;18038:18:1;;;18031:39;18087:19;;5117:107:0;17881:231:1;4711:253:0;4797:7;-1:-1:-1;;;;;4837:19:0;;4816:108;;;;-1:-1:-1;;;4816:108:0;;17498:2:1;4816:108:0;;;17480:21:1;17537:2;17517:18;;;17510:30;17576:34;17556:18;;;17549:62;-1:-1:-1;;;17627:18:1;;;17620:40;17677:19;;4816:108:0;17470:232:1;4816:108:0;-1:-1:-1;;;;;;4941:16:0;;;;;:9;:16;;;;;;;4711:253::o;16594:94::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;16660:21:::1;16678:1;16660:9;:21::i;:::-;16594:94::o:0;30174:421::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21793:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;30300:9:::2;30295:294;30315:20:::0;;::::2;30295:294;;;30388:1;30364:9:::0;;30374:1;30364:12;;::::2;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;30364:26:0::2;;;30356:57;;;::::0;-1:-1:-1;;;30356:57:0;;13047:2:1;30356:57:0::2;::::0;::::2;13029:21:1::0;13086:2;13066:18;;;13059:30;-1:-1:-1;;;13105:18:1;;;13098:48;13163:18;;30356:57:0::2;13019:168:1::0;30356:57:0::2;30455:4;30428:10;:24;30439:9;;30449:1;30439:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;30428:24:0::2;::::0;;::::2;::::0;::::2;::::0;;;;;;-1:-1:-1;30428:24:0;;;:31;;-1:-1:-1;;30428:31:0::2;::::0;::::2;;::::0;;;::::2;::::0;;;30473:17:::2;-1:-1:-1::0;30491:9:0;;30501:1;30491:12;;::::2;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;30473:31:0::2;-1:-1:-1::0;;;;;30473:31:0::2;;;;;;;;;;;;;:35;:105;;30577:1;30473:105;;;30527:17;:31;30545:9;;30555:1;30545:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;30527:31:0::2;-1:-1:-1::0;;;;;30527:31:0::2;;;;;;;;;;;;;30473:105;-1:-1:-1::0;30337:3:0;::::2;::::0;::::2;:::i;:::-;;;;30295:294;;31070:165:::0;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;31140:21:::1;31179:11:::0;31171:20:::1;;;::::0;::::1;;31201:27;31211:7;16452:6:::0;;-1:-1:-1;;;;;16452:6:0;;16380:85;31211:7:::1;31220;31201:9;:27::i;:::-;31112:123;31070:165::o:0;5365:104::-;5423:13;5455:7;5448:14;;;;;:::i;24727:801::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;23414:23;23410:111;;23474:15;23461:10;;:28;23453:57;;;;-1:-1:-1;;;23453:57:0;;22193:2:1;23453:57:0;;;22175:21:1;22232:2;22212:18;;;22205:30;-1:-1:-1;;;22251:18:1;;;22244:46;22307:18;;23453:57:0;22165:166:1;23453:57:0;24795:13:::1;24811:32;24841:1;24811:25;:15;1500:14:::0;;1409:112;24811:32:::1;24795:48:::0;-1:-1:-1;24879:12:0::1;24861:14;24869:6:::0;24795:48;24861:14:::1;:::i;:::-;:30;;24853:52;;;::::0;-1:-1:-1;;;24853:52:0;;15611:2:1;24853:52:0::1;::::0;::::1;15593:21:1::0;15650:1;15630:18;;;15623:29;-1:-1:-1;;;15668:18:1;;;15661:39;15717:18;;24853:52:0::1;15583:158:1::0;24853:52:0::1;24932:12;24923:5;:21;;24915:70;;;::::0;-1:-1:-1;;;24915:70:0;;11056:2:1;24915:70:0::1;::::0;::::1;11038:21:1::0;11095:2;11075:18;;;11068:30;11134:34;11114:18;;;11107:62;-1:-1:-1;;;11185:18:1;;;11178:34;11229:19;;24915:70:0::1;11028:226:1::0;24915:70:0::1;25013:11;25003:6;:21;;24995:71;;;::::0;-1:-1:-1;;;24995:71:0;;14446:2:1;24995:71:0::1;::::0;::::1;14428:21:1::0;14485:2;14465:18;;;14458:30;14524:34;14504:18;;;14497:62;-1:-1:-1;;;14575:18:1;;;14568:35;14620:19;;24995:71:0::1;14418:227:1::0;24995:71:0::1;25085:8;::::0;::::1;;25084:9;25076:37;;;::::0;-1:-1:-1;;;25076:37:0;;24134:2:1;25076:37:0::1;::::0;::::1;24116:21:1::0;24173:2;24153:18;;;24146:30;-1:-1:-1;;;24192:18:1;;;24185:45;24247:18;;25076:37:0::1;24106:165:1::0;25076:37:0::1;3551:10:::0;25144:29:::1;::::0;;;:15:::1;:29;::::0;;;;;25186:11:::1;::::0;25144:38:::1;::::0;25176:6;;25144:38:::1;:::i;:::-;:53;;25123:127;;;::::0;-1:-1:-1;;;25123:127:0;;21837:2:1;25123:127:0::1;::::0;::::1;21819:21:1::0;21876:2;21856:18;;;21849:30;21915:29;21895:18;;;21888:57;21962:18;;25123:127:0::1;21809:177:1::0;25123:127:0::1;25281:17;25291:6;25281:9;:17::i;:::-;25268:9;:30;;25260:60;;;::::0;-1:-1:-1;;;25260:60:0;;21089:2:1;25260:60:0::1;::::0;::::1;21071:21:1::0;21128:2;21108:18;;;21101:30;-1:-1:-1;;;21147:18:1;;;21140:47;21204:18;;25260:60:0::1;21061:167:1::0;25260:60:0::1;3551:10:::0;25332:29:::1;::::0;;;:15:::1;:29;::::0;;;;:39;;25365:6;;25332:29;:39:::1;::::0;25365:6;;25332:39:::1;:::i;:::-;::::0;;;-1:-1:-1;25386:9:0::1;::::0;-1:-1:-1;25381:90:0::1;25405:6;25401:1;:10;25381:90;;;25432:28;3551:10:::0;25432:14:::1;:28::i;:::-;25413:3:::0;::::1;::::0;::::1;:::i;:::-;;;;25381:90;;;;25480:41;25490:7;16452:6:::0;;-1:-1:-1;;;;;16452:6:0;;16380:85;25490:7:::1;25499:21;25480:9;:41::i;6682:314::-:0;-1:-1:-1;;;;;6808:24:0;;3551:10;6808:24;;6800:62;;;;-1:-1:-1;;;6800:62:0;;15257:2:1;6800:62:0;;;15239:21:1;15296:2;15276:18;;;15269:30;15335:27;15315:18;;;15308:55;15380:18;;6800:62:0;15229:175:1;6800:62:0;3551:10;6873:32;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;6873:42:0;;;;;;;;;;;;:53;;-1:-1:-1;;6873:53:0;;;;;;;;;;6941:48;;10159:41:1;;;6873:42:0;;3551:10;6941:48;;10132:18:1;6941:48:0;;;;;;;6682:314;;:::o;30756:308::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;21793:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;30887:9:::2;30882:176;30902:20:::0;;::::2;30882:176;;;30975:1;30951:9:::0;;30961:1;30951:12;;::::2;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;30951:26:0::2;;;30943:57;;;::::0;-1:-1:-1;;;30943:57:0;;13047:2:1;30943:57:0::2;::::0;::::2;13029:21:1::0;13086:2;13066:18;;;13059:30;-1:-1:-1;;;13105:18:1;;;13098:48;13163:18;;30943:57:0::2;13019:168:1::0;30943:57:0::2;31042:5;31015:10;:24;31026:9;;31036:1;31026:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;31015:24:0::2;::::0;;::::2;::::0;::::2;::::0;;;;;;-1:-1:-1;31015:24:0;:32;;-1:-1:-1;;31015:32:0::2;::::0;::::2;;::::0;;;::::2;::::0;;30924:3;::::2;::::0;::::2;:::i;:::-;;;;30882:176;;7751:354:::0;7933:41;3551:10;7966:7;7933:18;:41::i;:::-;7912:137;;;;-1:-1:-1;;;7912:137:0;;;;;;;:::i;:::-;8059:39;8073:4;8079:2;8083:7;8092:5;8059:13;:39::i;27902:822::-;8523:4;8546:16;;;:7;:16;;;;;;27991:13;;-1:-1:-1;;;;;8546:16:0;28016:110;;;;-1:-1:-1;;;28016:110:0;;20673:2:1;28016:110:0;;;20655:21:1;20712:2;20692:18;;;20685:30;20751:34;20731:18;;;20724:62;-1:-1:-1;;;20802:18:1;;;20795:45;20857:19;;28016:110:0;20645:237:1;28016:110:0;28171:33;;;;;;;;;;;;-1:-1:-1;;;28171:33:0;;;;28154:7;;28137:14;28245:10;:8;:10::i;:::-;28269;;28214:41;;-1:-1:-1;28269:10:0;;;;;28265:453;;;28349:1;28324:14;28318:28;:32;:306;;;;;;;;;;;;;;;;;28451:14;28495:17;:6;:15;:17::i;:::-;28542:9;28405:172;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;28318:306;28295:329;27902:822;-1:-1:-1;;;;;27902:822:0:o;28265:453::-;28686:19;28669:37;;;;;;;;:::i;25534:1042::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;23682:23;23678:192;;23745:15;23729:13;;:31;23721:64;;;;-1:-1:-1;;;23721:64:0;;13751:2:1;23721:64:0;;;13733:21:1;13790:2;13770:18;;;13763:30;-1:-1:-1;;;13809:18:1;;;13802:50;13869:18;;23721:64:0;13723:170:1;23721:64:0;23820:15;23807:10;;:28;23799:60;;;;-1:-1:-1;;;23799:60:0;;12699:2:1;23799:60:0;;;12681:21:1;12738:2;12718:18;;;12711:30;-1:-1:-1;;;12757:18:1;;;12750:49;12816:18;;23799:60:0;12671:169:1;23799:60:0;21793:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;25669:10:::2;25658:22;::::0;;;:10:::2;:22;::::0;;;;;::::2;;25650:59;;;::::0;-1:-1:-1;;;25650:59:0;;15948:2:1;25650:59:0::2;::::0;::::2;15930:21:1::0;15987:2;15967:18;;;15960:30;16026:26;16006:18;;;15999:54;16070:18;;25650:59:0::2;15920:174:1::0;25650:59:0::2;25750:21;25740:6;:31;;25719:112;;;::::0;-1:-1:-1;;;25719:112:0;;19860:2:1;25719:112:0::2;::::0;::::2;19842:21:1::0;19899:2;19879:18;;;19872:30;19938:34;19918:18;;;19911:62;-1:-1:-1;;;19989:18:1;;;19982:32;20031:19;;25719:112:0::2;19832:224:1::0;25719:112:0::2;25880:10;25862:29;::::0;;;:17:::2;:29;::::0;;;;;25904:21:::2;::::0;25862:38:::2;::::0;25894:6;;25862:38:::2;:::i;:::-;:63;;25841:147;;;::::0;-1:-1:-1;;;25841:147:0;;18319:2:1;25841:147:0::2;::::0;::::2;18301:21:1::0;18358:2;18338:18;;;18331:30;18397:34;18377:18;;;18370:62;-1:-1:-1;;;18448:18:1;;;18441:35;18493:19;;25841:147:0::2;18291:227:1::0;25841:147:0::2;25998:13;26014:32;26044:1;26014:25;:15;1500:14:::0;;1409:112;26014:32:::2;25998:48:::0;-1:-1:-1;26082:18:0::2;26064:14;26072:6:::0;25998:48;26064:14:::2;:::i;:::-;:36;;26056:66;;;::::0;-1:-1:-1;;;26056:66:0;;14100:2:1;26056:66:0::2;::::0;::::2;14082:21:1::0;14139:2;14119:18;;;14112:30;-1:-1:-1;;;14158:18:1;;;14151:47;14215:18;;26056:66:0::2;14072:167:1::0;26056:66:0::2;26149:18;26140:5;:27;;26132:70;;;::::0;-1:-1:-1;;;26132:70:0;;16714:2:1;26132:70:0::2;::::0;::::2;16696:21:1::0;16753:2;16733:18;;;16726:30;16792:32;16772:18;;;16765:60;16842:18;;26132:70:0::2;16686:180:1::0;26132:70:0::2;26233:20;26246:6;26233:12;:20::i;:::-;26220:9;:33;;26212:63;;;::::0;-1:-1:-1;;;26212:63:0;;21089:2:1;26212:63:0::2;::::0;::::2;21071:21:1::0;21128:2;21108:18;;;21101:30;-1:-1:-1;;;21147:18:1;;;21140:47;21204:18;;26212:63:0::2;21061:167:1::0;26212:63:0::2;26294:8;::::0;::::2;;26293:9;26285:37;;;::::0;-1:-1:-1;;;26285:37:0;;24134:2:1;26285:37:0::2;::::0;::::2;24116:21:1::0;24173:2;24153:18;;;24146:30;-1:-1:-1;;;24192:18:1;;;24185:45;24247:18;;26285:37:0::2;24106:165:1::0;26285:37:0::2;26350:10;26332:29;::::0;;;:17:::2;:29;::::0;;;;:39;;26365:6;;26332:29;:39:::2;::::0;26365:6;;26332:39:::2;:::i;:::-;;;;;;;;26402:6;26381:17;;:27;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;26423:9:0::2;::::0;-1:-1:-1;26418:101:0::2;26442:6;26438:1;:10;26418:101;;;26482:26;26497:10;26482:14;:26::i;:::-;26450:3:::0;::::2;::::0;::::2;:::i;:::-;;;;26418:101;;;;26528:41;26538:7;16452:6:::0;;-1:-1:-1;;;;;16452:6:0;;16380:85;24496:225;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;22030:1:::1;23593:27;23607:12;23593:13;:27::i;:::-;24587:9:::2;24606:109;24622:5;24618:1;:9;24606:109;;;24648:14;:16:::0;;;:14:::2;:16;::::0;::::2;:::i;:::-;;;;;;24678:26;24693:10;24678:14;:26::i;:::-;24629:3:::0;::::2;::::0;::::2;:::i;:::-;;;;24606:109;;20719:26:::0;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;29566:75::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;29619:8:::1;:15:::0;;-1:-1:-1;;29619:15:0::1;29630:4;29619:15;::::0;;29566:75::o;24092:190::-;24140:4;24176:15;24160:13;;:31;:63;;;;;24208:15;24195:10;;:28;24160:63;24156:119;;;-1:-1:-1;24244:4:0;;24092:190::o;24156:119::-;-1:-1:-1;24270:5:0;;24092:190::o;27371:106::-;27453:5;;27427:7;;27453:17;;27463:6;27453:9;:17::i;16694:223::-;16452:6;;-1:-1:-1;;;;;16452:6:0;3551:10;16510:23;16502:68;;;;-1:-1:-1;;;16502:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;16795:22:0;::::1;16774:107;;;::::0;-1:-1:-1;;;16774:107:0;;12292:2:1;16774:107:0::1;::::0;::::1;12274:21:1::0;12331:2;12311:18;;;12304:30;12370:34;12350:18;;;12343:62;-1:-1:-1;;;12421:18:1;;;12414:36;12467:19;;16774:107:0::1;12264:228:1::0;16774:107:0::1;16891:19;16901:8;16891:9;:19::i;1527:123::-:0;1614:19;;1632:1;1614:19;;;1527:123::o;17767:251::-;17883:4;-1:-1:-1;;;;;;17918:41:0;;-1:-1:-1;;;17918:41:0;;:93;;;17975:36;17999:11;17975:23;:36::i;18597:383::-;18579:5;-1:-1:-1;;;;;18734:33:0;;;;18713:122;;;;-1:-1:-1;;;18713:122:0;;23369:2:1;18713:122:0;;;23351:21:1;23408:2;23388:18;;;23381:30;23447:34;23427:18;;;23420:62;-1:-1:-1;;;23498:18:1;;;23491:40;23548:19;;18713:122:0;23341:232:1;18713:122:0;-1:-1:-1;;;;;18853:22:0;;18845:60;;;;-1:-1:-1;;;18845:60:0;;23780:2:1;18845:60:0;;;23762:21:1;23819:2;23799:18;;;23792:30;23858:27;23838:18;;;23831:55;23903:18;;18845:60:0;23752:175:1;18845:60:0;18938:35;;;;;;;;;-1:-1:-1;;;;;18938:35:0;;;;;;-1:-1:-1;;;;;18938:35:0;;;;;;;;;;-1:-1:-1;;;18916:57:0;;;;:19;:57;18597:383::o;10428:171::-;10502:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;10502:29:0;-1:-1:-1;;;;;10502:29:0;;;;;;;;:24;;10555:23;10502:24;10555:14;:23::i;:::-;-1:-1:-1;;;;;10546:46:0;;;;;;;;;;;10428:171;;:::o;23893:193::-;23967:16;23984:12;23967:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;23962:118;;24027:40;;-1:-1:-1;;;24027:40:0;;;8328:35:1;8379:12;;24027:40:0;;;-1:-1:-1;;24027:40:0;;;;;;;;;;-1:-1:-1;;;24013:56:0;;;;;;;:::i;1118:96::-;1176:7;1202:5;1206:1;1202;:5;:::i;:::-;1195:12;1118:96;-1:-1:-1;;;1118:96:0:o;8589:424::-;8704:4;8546:16;;;:7;:16;;;;;;-1:-1:-1;;;;;8546:16:0;8720:107;;;;-1:-1:-1;;;8720:107:0;;16301:2:1;8720:107:0;;;16283:21:1;16340:2;16320:18;;;16313:30;16379:34;16359:18;;;16352:62;-1:-1:-1;;;16430:18:1;;;16423:42;16482:19;;8720:107:0;16273:234:1;8720:107:0;8837:13;8853:23;8868:7;8853:14;:23::i;:::-;8837:39;;8905:5;-1:-1:-1;;;;;8894:16:0;:7;-1:-1:-1;;;;;8894:16:0;;:63;;;;8950:7;-1:-1:-1;;;;;8926:31:0;:20;8938:7;8926:11;:20::i;:::-;-1:-1:-1;;;;;8926:31:0;;8894:63;:111;;;-1:-1:-1;;;;;;7144:25:0;;;7121:4;7144:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;8973:32;8886:120;8589:424;-1:-1:-1;;;;8589:424:0:o;9828:594::-;9995:4;-1:-1:-1;;;;;9968:31:0;:23;9983:7;9968:14;:23::i;:::-;-1:-1:-1;;;;;9968:31:0;;9947:119;;;;-1:-1:-1;;;9947:119:0;;20263:2:1;9947:119:0;;;20245:21:1;20302:2;20282:18;;;20275:30;20341:34;20321:18;;;20314:62;-1:-1:-1;;;20392:18:1;;;20385:39;20441:19;;9947:119:0;20235:231:1;9947:119:0;-1:-1:-1;;;;;10084:16:0;;10076:65;;;;-1:-1:-1;;;10076:65:0;;14852:2:1;10076:65:0;;;14834:21:1;14891:2;14871:18;;;14864:30;14930:34;14910:18;;;14903:62;-1:-1:-1;;;14981:18:1;;;14974:34;15025:19;;10076:65:0;14824:226:1;10076:65:0;10152:39;10173:4;10179:2;10183:7;10152:20;:39::i;:::-;10253:29;10270:1;10274:7;10253:8;:29::i;:::-;-1:-1:-1;;;;;10293:15:0;;;;;;:9;:15;;;;;:20;;10312:1;;10293:15;:20;;10312:1;;10293:20;:::i;:::-;;;;-1:-1:-1;;;;;;;10323:13:0;;;;;;:9;:13;;;;;:18;;10340:1;;10323:13;:18;;10340:1;;10323:18;:::i;:::-;;;;-1:-1:-1;;10351:16:0;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;10351:21:0;-1:-1:-1;;;;;10351:21:0;;;;;;;;;10388:27;;10351:16;;10388:27;;;;;;;9828:594;;;:::o;24288:105::-;24335:7;24361:25;:15;1500:14;;1409:112;1016:96;1074:7;1100:5;1104:1;1100;:5;:::i;27057:194::-;27112:10;27125:14;:12;:14::i;:::-;27112:27;;27149;:15;1614:19;;1632:1;1614:19;;;1527:123;27149:27;27186:18;27196:3;27201:2;27186:9;:18::i;:::-;27219:25;;27241:2;;27219:25;;;;;27102:149;27057:194;:::o;16923:170::-;16998:6;;;-1:-1:-1;;;;;17014:17:0;;;-1:-1:-1;;;;;;17014:17:0;;;;;;;17046:40;;16998:6;;;17014:17;16998:6;;17046:40;;16979:16;;17046:40;16969:124;16923:170;:::o;31241:114::-;31313:35;;-1:-1:-1;;;;;31313:26:0;;;:35;;;;;31340:7;;31313:35;;;;31340:7;31313:26;:35;;;;;;;;;;;;;;;;;;;8111:341;8262:28;8272:4;8278:2;8282:7;8262:9;:28::i;:::-;8321:48;8344:4;8350:2;8354:7;8363:5;8321:22;:48::i;:::-;8300:145;;;;-1:-1:-1;;;8300:145:0;;;;;;;:::i;27644:111::-;27704:13;27736:12;27729:19;;;;;:::i;143:703::-;199:13;416:10;412:51;;-1:-1:-1;;442:10:0;;;;;;;;;;;;-1:-1:-1;;;442:10:0;;;;;143:703::o;412:51::-;487:5;472:12;526:75;533:9;;526:75;;558:8;;;;:::i;:::-;;-1:-1:-1;580:10:0;;-1:-1:-1;588:2:0;580:10;;:::i;:::-;;;526:75;;;610:19;642:6;632:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;632:17:0;;610:39;;659:150;666:10;;659:150;;692:11;702:1;692:11;;:::i;:::-;;-1:-1:-1;760:10:0;768:2;760:5;:10;:::i;:::-;747:24;;:2;:24;:::i;:::-;734:39;;717:6;724;717:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;717:56:0;;;;;;;;-1:-1:-1;787:11:0;796:2;787:11;;:::i;:::-;;;659:150;;12292:260;12408:4;-1:-1:-1;;;;;;12443:50:0;;-1:-1:-1;;;12443:50:0;;:102;;;12509:36;12533:11;12509:23;:36::i;13276:572::-;-1:-1:-1;;;;;13475:18:0;;13471:183;;13509:40;13541:7;14180:10;:17;;14153:24;;;;:15;:24;;;;;:44;;;14207:24;;;;;;;;;;;;14077:161;13509:40;13471:183;;;13578:2;-1:-1:-1;;;;;13570:10:0;:4;-1:-1:-1;;;;;13570:10:0;;13566:88;;13596:47;13629:4;13635:7;13596:32;:47::i;:::-;-1:-1:-1;;;;;13667:16:0;;13663:179;;13699:45;13736:7;13699:36;:45::i;13663:179::-;13771:4;-1:-1:-1;;;;;13765:10:0;:2;-1:-1:-1;;;;;13765:10:0;;13761:81;;13791:40;13819:2;13823:7;13791:27;:40::i;9019:108::-;9094:26;9104:2;9108:7;9094:26;;;;;;;;;;;;:9;:26::i;10605:954::-;10755:4;-1:-1:-1;;;;;10775:17:0;;959:19;:23;10771:782;;10830:170;;-1:-1:-1;;;10830:170:0;;-1:-1:-1;;;;;10830:36:0;;;;;:170;;3551:10;;10922:4;;10948:7;;10977:5;;10830:170;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10830:170:0;;;;;;;;-1:-1:-1;;10830:170:0;;;;;;;;;;;;:::i;:::-;;;10810:691;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11179:13:0;;11175:312;;11221:106;;-1:-1:-1;;;11221:106:0;;;;;;;:::i;11175:312::-;11439:6;11433:13;11424:6;11420:2;11416:15;11409:38;10810:691;-1:-1:-1;;;;;;11062:51:0;-1:-1:-1;;;11062:51:0;;-1:-1:-1;11055:58:0;;10771:782;-1:-1:-1;11538:4:0;10605:954;;;;;;:::o;4391:314::-;4507:4;-1:-1:-1;;;;;;4542:40:0;;-1:-1:-1;;;4542:40:0;;:104;;-1:-1:-1;;;;;;;4598:48:0;;-1:-1:-1;;;4598:48:0;4542:104;:156;;;-1:-1:-1;;;;;;;;;;3797:40:0;;;4662:36;3675:169;14244:821;14357:22;14407:1;14382:22;14399:4;14382:16;:22::i;:::-;:26;;;;:::i;:::-;14418:18;14439:26;;;:17;:26;;;;;;14357:51;;-1:-1:-1;14569:28:0;;;14565:323;;-1:-1:-1;;;;;14635:18:0;;14613:19;14635:18;;;:12;:18;;;;;;;;:34;;;;;;;;;14684:30;;;;;;:44;;;14800:30;;:17;:30;;;;;:43;;;14565:323;-1:-1:-1;14981:26:0;;;;:17;:26;;;;;;;;14974:33;;;-1:-1:-1;;;;;15024:18:0;;;;;:12;:18;;;;;:34;;;;;;;15017:41;14244:821::o;15071:1061::-;15345:10;:17;15320:22;;15345:21;;15365:1;;15345:21;:::i;:::-;15376:18;15397:24;;;:15;:24;;;;;;15765:10;:26;;15320:46;;-1:-1:-1;15397:24:0;;15320:46;;15765:26;;;;;;:::i;:::-;;;;;;;;;15743:48;;15827:11;15802:10;15813;15802:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;15906:28;;;:15;:28;;;;;;;:41;;;16075:24;;;;;16068:31;16109:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;15142:990;;;15071:1061;:::o;13854:217::-;13938:14;13955:20;13972:2;13955:16;:20::i;:::-;-1:-1:-1;;;;;13985:16:0;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;14029:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;13854:217:0:o;9133:311::-;9258:18;9264:2;9268:7;9258:5;:18::i;:::-;9307:54;9338:1;9342:2;9346:7;9355:5;9307:22;:54::i;:::-;9286:151;;;;-1:-1:-1;;;9286:151:0;;;;;;;:::i;9450:372::-;-1:-1:-1;;;;;9529:16:0;;9521:61;;;;-1:-1:-1;;;9521:61:0;;18725:2:1;9521:61:0;;;18707:21:1;;;18744:18;;;18737:30;18803:34;18783:18;;;18776:62;18855:18;;9521:61:0;18697:182:1;9521:61:0;8523:4;8546:16;;;:7;:16;;;;;;-1:-1:-1;;;;;8546:16:0;:30;9592:58;;;;-1:-1:-1;;;9592:58:0;;13394:2:1;9592:58:0;;;13376:21:1;13433:2;13413:18;;;13406:30;13472;13452:18;;;13445:58;13520:18;;9592:58:0;13366:178:1;9592:58:0;9661:45;9690:1;9694:2;9698:7;9661:20;:45::i;:::-;-1:-1:-1;;;;;9717:13:0;;;;;;:9;:13;;;;;:18;;9734:1;;9717:13;:18;;9734:1;;9717:18;:::i;:::-;;;;-1:-1:-1;;9745:16:0;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9745:21:0;-1:-1:-1;;;;;9745:21:0;;;;;;;;9782:33;;9745:16;;;9782:33;;9745:16;;9782:33;9450:372;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:406:1;78:5;112:18;104:6;101:30;98:2;;;134:18;;:::i;:::-;172:57;217:2;196:15;;-1:-1:-1;;192:29:1;223:4;188:40;172:57;:::i;:::-;163:66;;252:6;245:5;238:21;292:3;283:6;278:3;274:16;271:25;268:2;;;309:1;306;299:12;268:2;358:6;353:3;346:4;339:5;335:16;322:43;412:1;405:4;396:6;389:5;385:18;381:29;374:40;88:332;;;;;:::o;425:234::-;464:5;499:20;;-1:-1:-1;;;;;550:33:1;;538:46;;528:2;;598:1;595;588:12;528:2;-1:-1:-1;;;;;620:33:1;;474:185;-1:-1:-1;;474:185:1:o;664:186::-;723:6;776:2;764:9;755:7;751:23;747:32;744:2;;;792:1;789;782:12;744:2;815:29;834:9;815:29;:::i;855:260::-;923:6;931;984:2;972:9;963:7;959:23;955:32;952:2;;;1000:1;997;990:12;952:2;1023:29;1042:9;1023:29;:::i;:::-;1013:39;;1071:38;1105:2;1094:9;1090:18;1071:38;:::i;:::-;1061:48;;942:173;;;;;:::o;1120:328::-;1197:6;1205;1213;1266:2;1254:9;1245:7;1241:23;1237:32;1234:2;;;1282:1;1279;1272:12;1234:2;1305:29;1324:9;1305:29;:::i;:::-;1295:39;;1353:38;1387:2;1376:9;1372:18;1353:38;:::i;:::-;1343:48;;1438:2;1427:9;1423:18;1410:32;1400:42;;1224:224;;;;;:::o;1453:666::-;1548:6;1556;1564;1572;1625:3;1613:9;1604:7;1600:23;1596:33;1593:2;;;1642:1;1639;1632:12;1593:2;1665:29;1684:9;1665:29;:::i;:::-;1655:39;;1713:38;1747:2;1736:9;1732:18;1713:38;:::i;:::-;1703:48;;1798:2;1787:9;1783:18;1770:32;1760:42;;1853:2;1842:9;1838:18;1825:32;1880:18;1872:6;1869:30;1866:2;;;1912:1;1909;1902:12;1866:2;1935:22;;1988:4;1980:13;;1976:27;-1:-1:-1;1966:2:1;;2017:1;2014;2007:12;1966:2;2040:73;2105:7;2100:2;2087:16;2082:2;2078;2074:11;2040:73;:::i;:::-;2030:83;;;1583:536;;;;;;;:::o;2124:347::-;2189:6;2197;2250:2;2238:9;2229:7;2225:23;2221:32;2218:2;;;2266:1;2263;2256:12;2218:2;2289:29;2308:9;2289:29;:::i;:::-;2279:39;;2368:2;2357:9;2353:18;2340:32;2415:5;2408:13;2401:21;2394:5;2391:32;2381:2;;2437:1;2434;2427:12;2381:2;2460:5;2450:15;;;2208:263;;;;;:::o;2476:254::-;2544:6;2552;2605:2;2593:9;2584:7;2580:23;2576:32;2573:2;;;2621:1;2618;2611:12;2573:2;2644:29;2663:9;2644:29;:::i;:::-;2634:39;2720:2;2705:18;;;;2692:32;;-1:-1:-1;;;2563:167:1:o;2735:366::-;2802:6;2810;2863:2;2851:9;2842:7;2838:23;2834:32;2831:2;;;2879:1;2876;2869:12;2831:2;2902:29;2921:9;2902:29;:::i;:::-;2892:39;;2981:2;2970:9;2966:18;2953:32;-1:-1:-1;;;;;3018:5:1;3014:38;3007:5;3004:49;2994:2;;3067:1;3064;3057:12;3106:615;3192:6;3200;3253:2;3241:9;3232:7;3228:23;3224:32;3221:2;;;3269:1;3266;3259:12;3221:2;3309:9;3296:23;3338:18;3379:2;3371:6;3368:14;3365:2;;;3395:1;3392;3385:12;3365:2;3433:6;3422:9;3418:22;3408:32;;3478:7;3471:4;3467:2;3463:13;3459:27;3449:2;;3500:1;3497;3490:12;3449:2;3540;3527:16;3566:2;3558:6;3555:14;3552:2;;;3582:1;3579;3572:12;3552:2;3635:7;3630:2;3620:6;3617:1;3613:14;3609:2;3605:23;3601:32;3598:45;3595:2;;;3656:1;3653;3646:12;3595:2;3687;3679:11;;;;;3709:6;;-1:-1:-1;3211:510:1;;-1:-1:-1;;;;3211:510:1:o;3726:963::-;3810:6;3841:2;3884;3872:9;3863:7;3859:23;3855:32;3852:2;;;3900:1;3897;3890:12;3852:2;3940:9;3927:23;3969:18;4010:2;4002:6;3999:14;3996:2;;;4026:1;4023;4016:12;3996:2;4064:6;4053:9;4049:22;4039:32;;4109:7;4102:4;4098:2;4094:13;4090:27;4080:2;;4131:1;4128;4121:12;4080:2;4167;4154:16;4189:2;4185;4182:10;4179:2;;;4195:18;;:::i;:::-;4241:2;4238:1;4234:10;4224:20;;4264:28;4288:2;4284;4280:11;4264:28;:::i;:::-;4326:15;;;4357:12;;;;4389:11;;;4419;;;4415:20;;4412:33;-1:-1:-1;4409:2:1;;;4458:1;4455;4448:12;4409:2;4480:1;4471:10;;4490:169;4504:2;4501:1;4498:9;4490:169;;;4561:23;4580:3;4561:23;:::i;:::-;4549:36;;4522:1;4515:9;;;;;4605:12;;;;4637;;4490:169;;;-1:-1:-1;4678:5:1;3821:868;-1:-1:-1;;;;;;;;3821:868:1:o;4694:245::-;4752:6;4805:2;4793:9;4784:7;4780:23;4776:32;4773:2;;;4821:1;4818;4811:12;4773:2;4860:9;4847:23;4879:30;4903:5;4879:30;:::i;4944:249::-;5013:6;5066:2;5054:9;5045:7;5041:23;5037:32;5034:2;;;5082:1;5079;5072:12;5034:2;5114:9;5108:16;5133:30;5157:5;5133:30;:::i;5198:450::-;5267:6;5320:2;5308:9;5299:7;5295:23;5291:32;5288:2;;;5336:1;5333;5326:12;5288:2;5376:9;5363:23;5409:18;5401:6;5398:30;5395:2;;;5441:1;5438;5431:12;5395:2;5464:22;;5517:4;5509:13;;5505:27;-1:-1:-1;5495:2:1;;5546:1;5543;5536:12;5495:2;5569:73;5634:7;5629:2;5616:16;5611:2;5607;5603:11;5569:73;:::i;5653:180::-;5712:6;5765:2;5753:9;5744:7;5740:23;5736:32;5733:2;;;5781:1;5778;5771:12;5733:2;-1:-1:-1;5804:23:1;;5723:110;-1:-1:-1;5723:110:1:o;5838:248::-;5906:6;5914;5967:2;5955:9;5946:7;5942:23;5938:32;5935:2;;;5983:1;5980;5973:12;5935:2;-1:-1:-1;;6006:23:1;;;6076:2;6061:18;;;6048:32;;-1:-1:-1;5925:161:1:o;6091:257::-;6132:3;6170:5;6164:12;6197:6;6192:3;6185:19;6213:63;6269:6;6262:4;6257:3;6253:14;6246:4;6239:5;6235:16;6213:63;:::i;:::-;6330:2;6309:15;-1:-1:-1;;6305:29:1;6296:39;;;;6337:4;6292:50;;6140:208;-1:-1:-1;;6140:208:1:o;6353:664::-;6580:3;6618:6;6612:13;6634:53;6680:6;6675:3;6668:4;6660:6;6656:17;6634:53;:::i;:::-;6750:13;;6709:16;;;;6772:57;6750:13;6709:16;6806:4;6794:17;;6772:57;:::i;:::-;6896:13;;6851:20;;;6918:57;6896:13;6851:20;6952:4;6940:17;;6918:57;:::i;:::-;6991:20;;6588:429;-1:-1:-1;;;;;6588:429:1:o;7022:1099::-;7150:3;7179:1;7212:6;7206:13;7242:3;7264:1;7292:9;7288:2;7284:18;7274:28;;7352:2;7341:9;7337:18;7374;7364:2;;7418:4;7410:6;7406:17;7396:27;;7364:2;7444;7492;7484:6;7481:14;7461:18;7458:38;7455:2;;;-1:-1:-1;;;7519:33:1;;7575:4;7572:1;7565:15;7605:4;7526:3;7593:17;7455:2;7636:18;7663:104;;;;7781:1;7776:320;;;;7629:467;;7663:104;-1:-1:-1;;7696:24:1;;7684:37;;7741:16;;;;-1:-1:-1;7663:104:1;;7776:320;24811:1;24804:14;;;24848:4;24835:18;;7871:1;7885:165;7899:6;7896:1;7893:13;7885:165;;;7977:14;;7964:11;;;7957:35;8020:16;;;;7914:10;;7885:165;;;7889:3;;8079:6;8074:3;8070:16;8063:23;;7629:467;-1:-1:-1;8112:3:1;;7158:963;-1:-1:-1;;;;;;;;7158:963:1:o;8610:488::-;-1:-1:-1;;;;;8879:15:1;;;8861:34;;8931:15;;8926:2;8911:18;;8904:43;8978:2;8963:18;;8956:34;;;9026:3;9021:2;9006:18;;8999:31;;;8804:4;;9047:45;;9072:19;;9064:6;9047:45;:::i;:::-;9039:53;8813:285;-1:-1:-1;;;;;;8813:285:1:o;9382:632::-;9553:2;9605:21;;;9675:13;;9578:18;;;9697:22;;;9524:4;;9553:2;9776:15;;;;9750:2;9735:18;;;9524:4;9819:169;9833:6;9830:1;9827:13;9819:169;;;9894:13;;9882:26;;9963:15;;;;9928:12;;;;9855:1;9848:9;9819:169;;;-1:-1:-1;10005:3:1;;9533:481;-1:-1:-1;;;;;;9533:481:1:o;10211:219::-;10360:2;10349:9;10342:21;10323:4;10380:44;10420:2;10409:9;10405:18;10397:6;10380:44;:::i;11671:414::-;11873:2;11855:21;;;11912:2;11892:18;;;11885:30;11951:34;11946:2;11931:18;;11924:62;-1:-1:-1;;;12017:2:1;12002:18;;11995:48;12075:3;12060:19;;11845:240::o;19297:356::-;19499:2;19481:21;;;19518:18;;;19511:30;19577:34;19572:2;19557:18;;19550:62;19644:2;19629:18;;19471:182::o;22336:413::-;22538:2;22520:21;;;22577:2;22557:18;;;22550:30;22616:34;22611:2;22596:18;;22589:62;-1:-1:-1;;;22682:2:1;22667:18;;22660:47;22739:3;22724:19;;22510:239::o;24458:275::-;24529:2;24523:9;24594:2;24575:13;;-1:-1:-1;;24571:27:1;24559:40;;24629:18;24614:34;;24650:22;;;24611:62;24608:2;;;24676:18;;:::i;:::-;24712:2;24705:22;24503:230;;-1:-1:-1;24503:230:1:o;24864:128::-;24904:3;24935:1;24931:6;24928:1;24925:13;24922:2;;;24941:18;;:::i;:::-;-1:-1:-1;24977:9:1;;24912:80::o;24997:120::-;25037:1;25063;25053:2;;25068:18;;:::i;:::-;-1:-1:-1;25102:9:1;;25043:74::o;25122:168::-;25162:7;25228:1;25224;25220:6;25216:14;25213:1;25210:21;25205:1;25198:9;25191:17;25187:45;25184:2;;;25235:18;;:::i;:::-;-1:-1:-1;25275:9:1;;25174:116::o;25295:125::-;25335:4;25363:1;25360;25357:8;25354:2;;;25368:18;;:::i;:::-;-1:-1:-1;25405:9:1;;25344:76::o;25425:258::-;25497:1;25507:113;25521:6;25518:1;25515:13;25507:113;;;25597:11;;;25591:18;25578:11;;;25571:39;25543:2;25536:10;25507:113;;;25638:6;25635:1;25632:13;25629:2;;;-1:-1:-1;;25673:1:1;25655:16;;25648:27;25478:205::o;25688:380::-;25767:1;25763:12;;;;25810;;;25831:2;;25885:4;25877:6;25873:17;25863:27;;25831:2;25938;25930:6;25927:14;25907:18;25904:38;25901:2;;;25984:10;25979:3;25975:20;25972:1;25965:31;26019:4;26016:1;26009:15;26047:4;26044:1;26037:15;26073:135;26112:3;-1:-1:-1;;26133:17:1;;26130:2;;;26153:18;;:::i;:::-;-1:-1:-1;26200:1:1;26189:13;;26120:88::o;26213:112::-;26245:1;26271;26261:2;;26276:18;;:::i;:::-;-1:-1:-1;26310:9:1;;26251:74::o;26330:127::-;26391:10;26386:3;26382:20;26379:1;26372:31;26422:4;26419:1;26412:15;26446:4;26443:1;26436:15;26462:127;26523:10;26518:3;26514:20;26511:1;26504:31;26554:4;26551:1;26544:15;26578:4;26575:1;26568:15;26594:127;26655:10;26650:3;26646:20;26643:1;26636:31;26686:4;26683:1;26676:15;26710:4;26707:1;26700:15;26726:127;26787:10;26782:3;26778:20;26775:1;26768:31;26818:4;26815:1;26808:15;26842:4;26839:1;26832:15;26858:127;26919:10;26914:3;26910:20;26907:1;26900:31;26950:4;26947:1;26940:15;26974:4;26971:1;26964:15;26990:131;-1:-1:-1;;;;;;27064:32:1;;27054:43;;27044:2;;27111:1;27108;27101:12",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n}\n\nlibrary Address {\n    function isContractAddr(address account) internal view returns (bool) {\n        return account.code.length > 0;\n    }\n}\n\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n}\n\nlibrary Counters {\n    struct Counter {\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n}\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IERC721 is IERC165 {\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function getApproved(\n        uint256 tokenId\n    ) external view returns (address operator);\n\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n}\n\ninterface IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    string private _name;\n\n    string private _symbol;\n\n    mapping(uint256 => address) private _owners;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(uint256 => address) private _tokenApprovals;\n\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function balanceOf(\n        address owner\n    ) public view virtual override returns (uint256) {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    function ownerOf(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) external view virtual override returns (string memory) {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    function approve(address to, uint256 tokenId) external virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    function getApproved(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    function setApprovalForAll(\n        address operator,\n        bool approved\n    ) external virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    function _isApprovedOrOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721.ownerOf(tokenId) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContractAddr()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n\ninterface IERC721Enumerable is IERC721 {\n    function totalSupply() external view returns (uint256);\n\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) external view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n    uint256[] private _allTokens;\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC721) returns (bool) {\n        return\n            interfaceId == type(IERC721Enumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) public view virtual override returns (uint256) {\n        require(\n            index < ERC721.balanceOf(owner),\n            \"ERC721Enumerable: owner index out of bounds\"\n        );\n        return _ownedTokens[owner][index];\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    function tokenByIndex(\n        uint256 index\n    ) external view virtual override returns (uint256) {\n        require(\n            index < ERC721Enumerable.totalSupply(),\n            \"ERC721Enumerable: global index out of bounds\"\n        );\n        return _allTokens[index];\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    function _removeTokenFromOwnerEnumeration(\n        address from,\n        uint256 tokenId\n    ) private {\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() external virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) internal {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n\nabstract contract ERC2981 is IERC2981, ERC165 {\n    struct RoyaltyInfo {\n        address receiver;\n        uint96 royaltyFraction;\n    }\n\n    RoyaltyInfo private _defaultRoyaltyInfo;\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, ERC165) returns (bool) {\n        return\n            interfaceId == type(IERC2981).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(\n        uint256 _tokenId,\n        uint256 _salePrice\n    ) public view virtual override returns (address, uint256) {\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\n\n        if (royalty.receiver == address(0)) {\n            royalty = _defaultRoyaltyInfo;\n        }\n\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) /\n            _feeDenominator();\n\n        return (royalty.receiver, royaltyAmount);\n    }\n\n    function _feeDenominator() internal pure virtual returns (uint96) {\n        return 10000;\n    }\n\n    function _setDefaultRoyalty(\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(\n            feeNumerator <= _feeDenominator(),\n            \"ERC2981: royalty fee will exceed salePrice\"\n        );\n        require(receiver != address(0), \"ERC2981: invalid receiver\");\n\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    function _deleteDefaultRoyalty() internal virtual {\n        delete _defaultRoyaltyInfo;\n    }\n\n    function _setTokenRoyalty(\n        uint256 tokenId,\n        address receiver,\n        uint96 feeNumerator\n    ) internal virtual {\n        require(\n            feeNumerator <= _feeDenominator(),\n            \"ERC2981: royalty fee will exceed salePrice\"\n        );\n        require(receiver != address(0), \"ERC2981: Invalid parameters\");\n\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\n    }\n\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\n        delete _tokenRoyaltyInfo[tokenId];\n    }\n}\n\ncontract NFTContract is ERC721Enumerable, ERC2981, Ownable {\n    using SafeMath for uint256;\n    using Counters for Counters.Counter;\n    using Strings for uint256;\n\n    Counters.Counter private _tokenIdTracker;\n\n    uint256 public immutable MAX_ELEMENTS;\n    uint256 public PRICE;\n    uint256 public PRESALE_PRICE;\n    uint256 public immutable MAX_MINT_TX;\n    uint256 public immutable MAX_BY_MINT;\n    uint256 public immutable PRESALE_MINT_LIMIT;\n    uint256 public immutable MAX_MINT_WHITELIST_TX;\n    uint256 public immutable MAX_BY_MINT_WHITELIST;\n    uint256 public SALE_START; //Sunday, July 11, 2022, 00:00:00 UTC\n    uint256 public PRESALE_START; //Monday, July 09, 2022, 00:00:00 UTC\n\n    bool public isPaused = false;\n    bool public isRevealed = false;\n\n    mapping(address => bool) private _whiteList;\n    mapping(address => uint256) private _whiteListClaimed;\n    mapping(address => uint256) private _generalClaimed;\n\n    bool[] private ennabledFeatures;\n    uint256 private _reservedCount = 0;\n    uint256 private _presaleMintCount = 0;\n\n    string private notRevealedtokenUri;\n    string public baseTokenURI;\n\n    event CreateAlphaOctopusNFT(uint256 indexed id);\n    event PresaleTimeChanged(uint256 indexed newTimestamp);\n    event PresalePriceChanged(uint256 indexed newPrice);\n    event SaleTimeChanged(uint256 indexed newTimestamp);\n    event SalePriceChanged(uint256 indexed newPrice);\n\n    address private saleFundsReceiver;\n    //string\n    uint256 constant CID_UNREVEAL_METADATA = 0;\n    uint256 constant CID_METADATA = 1;\n\n    //address\n    uint256 constant OWNER = 0;\n    uint256 constant ADDRESS_SALE_AMT = 1;\n    uint256 constant ADDRESS_ROYALTY = 2;\n\n    //uint256\n\n    uint256 constant COLLECTION_SIZE = 0;\n    uint256 constant MINTS_PER_TX = 1;\n    uint256 constant MINT_PRICE = 2;\n    uint256 constant MINTS_PER_WALLET = 3;\n    uint256 constant MINT_START_TIME = 4;\n    uint256 constant ROYALTY_BIPS = 5;\n    uint256 constant PRESALE_LIMIT = 6;\n    uint256 constant PRESALE_MINT_PRICE = 7;\n    uint256 constant PRESALE_MINT_PER_TX = 8;\n    uint256 constant PRESALE_MINT_PER_WALLET = 9;\n\n    //boolean\n    uint256 constant ENABLE_PRESALE = 0;\n    uint256 constant ENABLE_AIRDROPS = 1;\n    uint256 constant ENABLE_CHANGE_MINTING_PRICES = 2;\n    uint256 constant ENABLE_CHANGE_MINTING_TIMING = 3;\n    uint256 constant ENABLE_NFT_REVEAL = 4;\n    uint256 constant ENABLE_PREMINT = 5;\n    uint256 constant ENABLE_COLLECTION_BASE_URI = 6;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string[] memory inputString,\n        address[] memory inputAddress,\n        uint256[] memory inputUint256,\n        bool[] memory inputBoolean\n    ) ERC721(name_, symbol_) {\n        MAX_ELEMENTS = inputUint256[COLLECTION_SIZE];\n        MAX_MINT_TX = inputUint256[MINTS_PER_TX];\n        PRICE = inputUint256[MINT_PRICE];\n        MAX_BY_MINT = inputUint256[MINTS_PER_WALLET];\n        SALE_START = inputUint256[MINT_START_TIME];\n        PRESALE_MINT_LIMIT = inputUint256[PRESALE_LIMIT];\n        PRESALE_PRICE = inputUint256[PRESALE_MINT_PRICE];\n        MAX_MINT_WHITELIST_TX = inputUint256[PRESALE_MINT_PER_TX];\n        MAX_BY_MINT_WHITELIST = inputUint256[PRESALE_MINT_PER_WALLET];\n        ennabledFeatures = inputBoolean;\n        if (!ennabledFeatures[ENABLE_NFT_REVEAL]) {\n            isRevealed = true;\n        }\n        _setDefaultRoyalty(\n            inputAddress[ADDRESS_ROYALTY],\n            uint96(inputUint256[ROYALTY_BIPS])\n        );\n        saleFundsReceiver = inputAddress[ADDRESS_SALE_AMT];\n        _setOwner(inputAddress[OWNER]);\n        notRevealedtokenUri = inputString[CID_UNREVEAL_METADATA];\n        baseTokenURI = inputString[CID_METADATA];\n        _tokenIdTracker.increment();\n    }\n\n    modifier saleIsOpen() {\n        if (_msgSender() != owner()) {\n            require(SALE_START < block.timestamp, \"Sale is not open\");\n        }\n        _;\n    }\n\n    modifier enabled(uint256 featureIndex) {\n        _checkFeature(featureIndex);\n        _;\n    }\n    modifier preSaleIsOpen() {\n        if (_msgSender() != owner()) {\n            require(PRESALE_START < block.timestamp, \"Pre Sale is not open\");\n            require(SALE_START > block.timestamp, \"Pre Sale is closed.\");\n        }\n        _;\n    }\n\n    function _checkFeature(uint256 featureIndex) internal view {\n        if (!ennabledFeatures[featureIndex]) {\n            revert(string(abi.encodePacked(\"Feature Not Enabled.\")));\n        }\n    }\n\n    function isPresaleOpen() external view returns (bool) {\n        if (PRESALE_START < block.timestamp && SALE_START > block.timestamp)\n            return true;\n        else return false;\n    }\n\n    function _totalSupply() internal view returns (uint256) {\n        return _tokenIdTracker.current();\n    }\n\n    function totalMint() external view returns (uint256) {\n        return _totalSupply();\n    }\n\n    function reserveTokens(uint256 count) external onlyOwner enabled(ENABLE_PREMINT) {\n        uint256 i;\n        for (i = 0; i < count; i++) {\n            _reservedCount++;\n            _mintAnElement(msg.sender);\n        }\n    }\n\n    function mint(uint256 _count) external payable saleIsOpen {\n        uint256 total = _tokenIdTracker.current().sub(1);\n        require(total + _count <= MAX_ELEMENTS, \"Max limit\");\n        require(total <= MAX_ELEMENTS, \"All Alpha Octopus NFT's are sold out\");\n        require(_count <= MAX_BY_MINT, \"Exceeds allowed NFT's per transaction\");\n        require(!isPaused, \"Sale is Paused.\");\n        require(\n            _generalClaimed[_msgSender()] + _count <= MAX_BY_MINT,\n            \"Exceeds your minting quota.\"\n        );\n        require(msg.value >= salePrice(_count), \"Value below price\");\n\n\n        _generalClaimed[_msgSender()] += _count;\n        for (uint256 i = 0; i < _count; i++) {\n            _mintAnElement(_msgSender());\n        }\n        _withdraw(owner(), address(this).balance);\n    }\n\n    function presaleMint(\n        uint256 _count\n    ) external payable preSaleIsOpen enabled(ENABLE_PRESALE) {\n        require(_whiteList[msg.sender], \"You are not in whitelist\");\n        require(\n            _count <= MAX_BY_MINT_WHITELIST,\n            \"More then allowed per transaction.\"\n        );\n        require(\n            _whiteListClaimed[msg.sender] + _count <= MAX_BY_MINT_WHITELIST,\n            \"Exceeds your whitelist minting quota.\"\n        );\n        uint256 total = _tokenIdTracker.current().sub(1);\n        require(total + _count <= PRESALE_MINT_LIMIT, \"Max presale limit\");\n        require(total <= PRESALE_MINT_LIMIT, \"All presale NFT's are sold out\");\n        require(msg.value >= presalePrice(_count), \"Value below price\");\n        require(!isPaused, \"Sale is Paused.\");\n        _whiteListClaimed[msg.sender] += _count;\n        _presaleMintCount += _count;\n        for (uint256 i = 0; i < _count; i++) {\n            \n            _mintAnElement(msg.sender);\n        }\n        _withdraw(owner(), address(this).balance);\n    }\n\n    function airdropNFT(\n        address[] memory winners\n    ) external onlyOwner enabled(ENABLE_AIRDROPS) {\n        uint256 total = _tokenIdTracker.current().sub(1);\n        require(total + winners.length <= MAX_ELEMENTS, \"Max limit\");\n        require(\n            winners.length > 0,\n            \"Please provide the list of wallets for the airdrop\"\n        );\n        for (uint256 i = 0; i < winners.length; i++) {\n            _mintAnElement(winners[i]);\n        }\n    }\n\n    function _mintAnElement(address _to) private {\n        uint256 id = _totalSupply();\n        _tokenIdTracker.increment();\n        _safeMint(_to, id);\n        emit CreateAlphaOctopusNFT(id);\n    }\n\n    function revealCollection() external onlyOwner enabled(ENABLE_NFT_REVEAL) {\n        isRevealed = true;\n    }\n\n    function salePrice(uint256 _count) public view returns (uint256) {\n        return PRICE.mul(_count);\n    }\n\n    function presalePrice(\n        uint256 _count\n    ) public view enabled(ENABLE_PRESALE) returns (uint256) {\n        return PRESALE_PRICE.mul(_count);\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return baseTokenURI;\n    }\n\n    function setBaseURI(string memory baseURI) public onlyOwner enabled(ENABLE_COLLECTION_BASE_URI) {\n        baseTokenURI = baseURI;\n    }\n\n    function tokenURI(\n        uint256 tokenId\n    ) external view virtual override returns (string memory) {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        uint256 metaId = tokenId;\n        string memory uriSuffix = \".json\";\n        string memory currentBaseURI = _baseURI();\n        if (isRevealed) {\n            return\n                bytes(currentBaseURI).length > 0\n                    ? string(\n                        abi.encodePacked(\n                            currentBaseURI,\n                            metaId.toString(),\n                            uriSuffix\n                        )\n                    )\n                    : \"\";\n        } else {\n            return string(abi.encodePacked(notRevealedtokenUri));\n        }\n    }\n\n    function walletOfOwner(\n        address _owner\n    ) external view returns (uint256[] memory) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        uint256[] memory tokensId = new uint256[](tokenCount);\n        for (uint256 i = 0; i < tokenCount; i++) {\n            tokensId[i] = tokenOfOwnerByIndex(_owner, i);\n        }\n\n        return tokensId;\n    }\n\n    function setPresaleTime(\n        uint256 _presaleTime\n    )\n        external\n        onlyOwner\n        enabled(ENABLE_PRESALE)\n        enabled(ENABLE_CHANGE_MINTING_TIMING)\n    {\n        PRESALE_START = _presaleTime;\n        emit PresaleTimeChanged(_presaleTime);\n    }\n\n    function setSaleTime(\n        uint256 _saleTime\n    ) external onlyOwner enabled(ENABLE_CHANGE_MINTING_TIMING) {\n        SALE_START = _saleTime;\n        emit SaleTimeChanged(_saleTime);\n    }\n\n    function pauseMinting() external onlyOwner {\n        isPaused = true;\n    }\n\n    function resumeMinting() external onlyOwner {\n        isPaused = false;\n    }\n\n    function setPresalePrice(\n        uint256 _price\n    )\n        external\n        onlyOwner\n        enabled(ENABLE_PRESALE)\n        enabled(ENABLE_CHANGE_MINTING_PRICES)\n    {\n        PRESALE_PRICE = _price;\n        emit PresalePriceChanged(_price);\n    }\n\n    function setSalePrice(\n        uint256 _price\n    ) external onlyOwner enabled(ENABLE_CHANGE_MINTING_PRICES) {\n        PRICE = _price;\n        emit SalePriceChanged(_price);\n    }\n\n    function addToWhiteList(\n        address[] calldata addresses\n    ) external onlyOwner enabled(ENABLE_PRESALE) {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            require(addresses[i] != address(0), \"Null address found\");\n\n            _whiteList[addresses[i]] = true;\n            _whiteListClaimed[addresses[i]] > 0\n                ? _whiteListClaimed[addresses[i]]\n                : 0;\n        }\n    }\n\n    function addressInWhitelist(\n        address addr\n    ) external view enabled(ENABLE_PRESALE) returns (bool) {\n        return _whiteList[addr];\n    }\n\n    function removeFromWhiteList(\n        address[] calldata addresses\n    ) external onlyOwner enabled(ENABLE_PRESALE) {\n        for (uint256 i = 0; i < addresses.length; i++) {\n            require(addresses[i] != address(0), \"Null address found\");\n\n            _whiteList[addresses[i]] = false;\n        }\n    }\n\n    function withdrawAll() external onlyOwner {\n        uint256 balance = address(this).balance;\n        require(balance > 0);\n        _withdraw(owner(), balance);\n    }\n\n    function _withdraw(address _address, uint256 _amount) private {\n        payable(_address).transfer(_amount);\n    }\n\n    function setRoyaltyInfo(\n        address _receiver,\n        uint96 _royaltyFeesInBips\n    ) public onlyOwner {\n        _setDefaultRoyalty(_receiver, _royaltyFeesInBips);\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721Enumerable, ERC2981) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n}\n",
  "sourcePath": "/Users/shivam/github/nft-generator-cotracts/contracts/Token.sol",
  
  "compiler": {
    "name": "solc",
    "version": "0.8.6+commit.0e36fba0.mod.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.1",
  "updatedAt": "2023-01-10T09:02:05.138Z"
}